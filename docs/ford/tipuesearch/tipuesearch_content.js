var tipuesearch = {"pages":[{"title":" ecx ","text":"ecx This is the documentation of the Fortran code. Go back to the main documentation click here Developer Info Milan Skocic","tags":"home","loc":"index.html"},{"title":"ecx_kinetics_sbv – ecx","text":"public pure elemental function ecx_kinetics_sbv(U, OCV, j0, aa, ac, za, zc, A, T) result(I) Compute Butler Volmer equation without mass transport. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: U Electrochemical potential in V. real(kind=real64), intent(in) :: OCV Open Circuit Voltage in V. real(kind=real64), intent(in) :: j0 Exchange current density in A.cm-2. real(kind=real64), intent(in) :: aa Anodic transfer coefficient. real(kind=real64), intent(in) :: ac Cathodic transfer coefficient. real(kind=real64), intent(in) :: za Number of exchnaged electrons in the anodic branch. real(kind=real64), intent(in) :: zc Number of exchnaged electrons in the cathodic branch. real(kind=real64), intent(in) :: A Area in cm2. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Contents None","tags":"","loc":"proc/ecx_kinetics_sbv.html"},{"title":"ecx_eis_zc – ecx","text":"public pure elemental function ecx_eis_zc(w, C) result(Z) Compute the complex impedance for a capacitor. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: C Capacitance in Farad. Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zc.html"},{"title":"ecx_eis_zcpe – ecx","text":"public pure elemental function ecx_eis_zcpe(w, Q, a) result(Z) Compute the complex impedance for a CPE. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: Q Resistance in S.s&#94;-a real(kind=real64), intent(in) :: a CPE exponent Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zcpe.html"},{"title":"ecx_eis_zflw – ecx","text":"public pure elemental function ecx_eis_zflw(w, R, tau, n) result(Z) @brief Compute the complex impedance for a finite length warburg Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequency in rad.s&#94;-1. real(kind=real64), intent(in) :: R Resistance in Ohms. real(kind=real64), intent(in) :: tau Characteristic time in s. real(kind=real64), intent(in) :: n Order of the fsw. Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zflw.html"},{"title":"ecx_eis_zfsw – ecx","text":"public pure elemental function ecx_eis_zfsw(w, R, tau, n) result(Z) Compute the complex impedance for a finite space warburg Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequency in rad.s&#94;-1. real(kind=real64), intent(in) :: R Resistance in Ohms. real(kind=real64), intent(in) :: tau Characteristic time in s. real(kind=real64), intent(in) :: n Order of the fsw. Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zfsw.html"},{"title":"ecx_eis_zg – ecx","text":"public pure elemental function ecx_eis_zg(w, G, K) result(Z) Compute the complex impedance of the Gerisher element. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequency in rad.s&#94;-1. real(kind=real64), intent(in) :: G Pseudo-Resistance in Ohms.s&#94;(1/2). real(kind=real64), intent(in) :: K Offset in rad.s&#94;-1. Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zg.html"},{"title":"ecx_eis_zl – ecx","text":"public pure elemental function ecx_eis_zl(w, L) result(Z) Compute the complex impedance for an inductor. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: L Inductance in Henry. Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zl.html"},{"title":"ecx_eis_zr – ecx","text":"public pure elemental function ecx_eis_zr(w, R) result(Z) Compute the complex impedance for a resistor. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: R Resistance in Ohms. Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zr.html"},{"title":"ecx_eis_zw – ecx","text":"public pure elemental function ecx_eis_zw(w, s) result(Z) Compute the complex impedance for a semi-infinite Warburg. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: s Pseudo-Resistance in Ohms.s&#94;(1/2). Return Value complex(kind=real64) Complex impedance in Ohms. Contents None","tags":"","loc":"proc/ecx_eis_zw.html"},{"title":"ecx_eis_z – ecx","text":"public pure subroutine ecx_eis_z(p, w, z, e, errstat) Compute the complex impedance for the given element. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: p (:) Parameters. real(kind=real64), intent(in) :: w (:) Angular frequencies in rad.s-1 complex(kind=real64), intent(out) :: z (:) Complex impedance in Ohms. character(len=1), intent(in) :: e Electrochemical element: R, C, L, Q, O, T, G integer(kind=int32), intent(out) :: errstat Error status Contents None","tags":"","loc":"proc/ecx_eis_z.html"},{"title":"ecx_core_assertEqual – ecx","text":"public function ecx_core_assertEqual(x1, x2, n) result(r) Assert if two numbers are equal. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x1 First number to be compared. real(kind=real64), intent(in) :: x2 Second number to be compared. integer(kind=int32), intent(in) :: n Number of digits. Return Value logical Comparison result. Contents Variables fac ix1 ix2 Variables Type Visibility Attributes Name Initial real(kind=real64), public :: fac real(kind=real64), public :: ix1 real(kind=real64), public :: ix2","tags":"","loc":"proc/ecx_core_assertequal.html"},{"title":"ecx_core_deg2rad – ecx","text":"public pure elemental function ecx_core_deg2rad(theta) result(phase) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: theta Angle in degrees. Return Value real(kind=real64) Angle in rad. Contents None","tags":"","loc":"proc/ecx_core_deg2rad.html"},{"title":"ecx_core_eV2nm – ecx","text":"public pure elemental function ecx_core_eV2nm(E) result(lambda) Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: E Energy in eV. Return Value real(kind=real64) Wavelength in nm. Contents None","tags":"","loc":"proc/ecx_core_ev2nm.html"},{"title":"ecx_core_kTe – ecx","text":"public pure elemental function ecx_core_kTe(T) result(r) Compute the thermal voltage. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Thermal voltage in V. Contents None","tags":"","loc":"proc/ecx_core_kte.html"},{"title":"ecx_core_nm2eV – ecx","text":"public pure elemental function ecx_core_nm2eV(lambda) result(E) Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: lambda Wavelength in nm. Return Value real(kind=real64) Energy in eV. Contents None","tags":"","loc":"proc/ecx_core_nm2ev.html"},{"title":"ecx_core_rad2deg – ecx","text":"public pure elemental function ecx_core_rad2deg(phase) result(theta) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: phase Angle in rad. Return Value real(kind=real64) Angle in degrees. Contents None","tags":"","loc":"proc/ecx_core_rad2deg.html"},{"title":"ecx_core_roundn – ecx","text":"public pure elemental function ecx_core_roundn(x, n) result(r) Round x to n digits. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Number to be rounded. integer(kind=int32), intent(in) :: n Number of digits.s Return Value real(kind=real64) Rounded number Contents Variables fac Variables Type Visibility Attributes Name Initial real(kind=real64), public :: fac","tags":"","loc":"proc/ecx_core_roundn.html"},{"title":"ecx_core_linspace – ecx","text":"public pure subroutine ecx_core_linspace(start, end, x) Linear spaced 1d-array. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: start Starting value. real(kind=real64), intent(in) :: end Ending value (included). integer(kind=int32), intent(out) :: x (:) 1d-array where to put the linear spaced values. Contents Variables dx i n Variables Type Visibility Attributes Name Initial real(kind=real64), public :: dx integer(kind=int32), public :: i integer(kind=int32), public :: n","tags":"","loc":"proc/ecx_core_linspace.html"},{"title":"ecx_core_logspace – ecx","text":"public pure subroutine ecx_core_logspace(start, end, x) Log spaced 1d-array. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: start Starting value. real(kind=real64), intent(in) :: end Ending value (included). integer(kind=int32), intent(out) :: x (:) 1d-array where to put the log spaced values. Contents None","tags":"","loc":"proc/ecx_core_logspace.html"},{"title":"ecx_core_capi_kTe – ecx","text":"public pure subroutine ecx_core_capi_kTe(T, kTe, n) bind(C) Compute the thermal voltage. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: T (n) Temperature in °C. real(kind=c_double), intent(out) :: kTe (n) Thermal voltage in V. integer(kind=c_size_t), intent(in), value :: n Size of T and kTe. Contents None","tags":"","loc":"proc/ecx_core_capi_kte.html"},{"title":"ecx_core_capi_nm2eV – ecx","text":"public pure subroutine ecx_core_capi_nm2eV(lambda, E, n) bind(C, name=\"0\") Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lambda (n) Wavelength in nm. real(kind=c_double), intent(out) :: E (n) Energy in eV. integer(kind=c_size_t), intent(in), value :: n Size of lambda and E. Contents None","tags":"","loc":"proc/ecx_core_capi_nm2ev.html"},{"title":"ecx_capi_zc – ecx","text":"public pure subroutine ecx_capi_zc(w, C, n, Z) bind(C) @brief Compute the complex impedance for a capacitor. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] C Capacitance in Farad.\n@param[in] n Size of w and Z.\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: C integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) Contents None","tags":"","loc":"proc/ecx_capi_zc.html"},{"title":"ecx_capi_zcpe – ecx","text":"public pure subroutine ecx_capi_zcpe(w, Q, a, n, Z) bind(C) @brief Compute the complex impedance for a CPE. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] Q Resistance in S.s&#94;-a\n@param[in] a CPE exponent\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: Q real(kind=c_double), intent(in), value :: a integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) Contents None","tags":"","loc":"proc/ecx_capi_zcpe.html"},{"title":"ecx_capi_zl – ecx","text":"public pure subroutine ecx_capi_zl(w, L, n, Z) bind(C) @brief Compute the complex impedance for a inductor. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] L Inductance in Henry.\n@param[in] n Size of w and Z.\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: L integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) Contents None","tags":"","loc":"proc/ecx_capi_zl.html"},{"title":"ecx_capi_zr – ecx","text":"public pure subroutine ecx_capi_zr(w, R, n, Z) bind(C) @brief Compute the complex impedance for a resistor. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] R Resistance in Ohms.\n@param[in] n Size of w and Z.\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: R integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) Contents None","tags":"","loc":"proc/ecx_capi_zr.html"},{"title":"ecx_capi_zw – ecx","text":"public pure subroutine ecx_capi_zw(w, s, n, Z) bind(C) @brief Compute the complex impedance for a finite length warburg\n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] s Pseudo-Resistance in Ohms.s&#94;(1/2).\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: s integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) Contents None","tags":"","loc":"proc/ecx_capi_zw.html"},{"title":"ecx_eis_capi_z – ecx","text":"public subroutine ecx_eis_capi_z(p, w, z, e, k, n, errstat) bind(C) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: p (k) real(kind=c_double), intent(in) :: w (n) complex(kind=c_double_complex), intent(out) :: z (n) character(kind=c_char,len=1), intent(in), value :: e integer(kind=c_size_t), intent(in), value :: k integer(kind=c_size_t), intent(in), value :: n integer(kind=c_int), intent(inout) :: errstat Contents None","tags":"","loc":"proc/ecx_eis_capi_z.html"},{"title":"ecx__kinetics – ecx","text":"Module for computing kinetics using the Butler-Volmer equations. Uses iso_fortran_env ecx__core codata Contents Functions ecx_kinetics_sbv Functions public pure elemental function ecx_kinetics_sbv (U, OCV, j0, aa, ac, za, zc, A, T) result(I) Compute Butler Volmer equation without mass transport. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: U Electrochemical potential in V. real(kind=real64), intent(in) :: OCV Open Circuit Voltage in V. real(kind=real64), intent(in) :: j0 Exchange current density in A.cm-2. real(kind=real64), intent(in) :: aa Anodic transfer coefficient. real(kind=real64), intent(in) :: ac Cathodic transfer coefficient. real(kind=real64), intent(in) :: za Number of exchnaged electrons in the anodic branch. real(kind=real64), intent(in) :: zc Number of exchnaged electrons in the cathodic branch. real(kind=real64), intent(in) :: A Area in cm2. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64)","tags":"","loc":"module/ecx__kinetics.html"},{"title":"ecx – ecx","text":"Main module for the ECX library. Uses ecx__pec ecx__kinetics ecx__core ecx__eis Contents None","tags":"","loc":"module/ecx.html"},{"title":"ecx__eis – ecx","text":"Module containing functions and subroutines for Electrochemical Impedance Spectroscopy. Uses ieee_arithmetic iso_fortran_env ecx__core Contents Variables ecx_eis_errmsg Functions ecx_eis_zc ecx_eis_zcpe ecx_eis_zflw ecx_eis_zfsw ecx_eis_zg ecx_eis_zl ecx_eis_zr ecx_eis_zw Subroutines ecx_eis_z Variables Type Visibility Attributes Name Initial type(ecx_eis_error_messages_t), public, parameter :: ecx_eis_errmsg (3) = [ecx_eis_error_messages_t(1, \"Parameter array must be at least of size 3.\"), ecx_eis_error_messages_t(2, \"Unknown element.\"), ecx_eis_error_messages_t(3, \"n must be greater or equal to 1.\")] Functions public pure elemental function ecx_eis_zc (w, C) result(Z) Compute the complex impedance for a capacitor. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: C Capacitance in Farad. Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zcpe (w, Q, a) result(Z) Compute the complex impedance for a CPE. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: Q Resistance in S.s&#94;-a real(kind=real64), intent(in) :: a CPE exponent Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zflw (w, R, tau, n) result(Z) @brief Compute the complex impedance for a finite length warburg Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequency in rad.s&#94;-1. real(kind=real64), intent(in) :: R Resistance in Ohms. real(kind=real64), intent(in) :: tau Characteristic time in s. real(kind=real64), intent(in) :: n Order of the fsw. Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zfsw (w, R, tau, n) result(Z) Compute the complex impedance for a finite space warburg Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequency in rad.s&#94;-1. real(kind=real64), intent(in) :: R Resistance in Ohms. real(kind=real64), intent(in) :: tau Characteristic time in s. real(kind=real64), intent(in) :: n Order of the fsw. Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zg (w, G, K) result(Z) Compute the complex impedance of the Gerisher element. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequency in rad.s&#94;-1. real(kind=real64), intent(in) :: G Pseudo-Resistance in Ohms.s&#94;(1/2). real(kind=real64), intent(in) :: K Offset in rad.s&#94;-1. Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zl (w, L) result(Z) Compute the complex impedance for an inductor. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: L Inductance in Henry. Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zr (w, R) result(Z) Compute the complex impedance for a resistor. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: R Resistance in Ohms. Return Value complex(kind=real64) Complex impedance in Ohms. public pure elemental function ecx_eis_zw (w, s) result(Z) Compute the complex impedance for a semi-infinite Warburg. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: w Angular frequencies in rad.s&#94;-1. real(kind=real64), intent(in) :: s Pseudo-Resistance in Ohms.s&#94;(1/2). Return Value complex(kind=real64) Complex impedance in Ohms. Subroutines public pure subroutine ecx_eis_z (p, w, z, e, errstat) Compute the complex impedance for the given element. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: p (:) Parameters. real(kind=real64), intent(in) :: w (:) Angular frequencies in rad.s-1 complex(kind=real64), intent(out) :: z (:) Complex impedance in Ohms. character(len=1), intent(in) :: e Electrochemical element: R, C, L, Q, O, T, G integer(kind=int32), intent(out) :: errstat Error status","tags":"","loc":"module/ecx__eis.html"},{"title":"ecx__core – ecx","text":"Module for constants and utilities functions used in the ECX library. Uses ieee_arithmetic iso_fortran_env codata Contents Variables ecx_core_PI ecx_core_T_K Functions ecx_core_assertEqual ecx_core_deg2rad ecx_core_eV2nm ecx_core_kTe ecx_core_nm2eV ecx_core_rad2deg ecx_core_roundn Subroutines ecx_core_linspace ecx_core_logspace Variables Type Visibility Attributes Name Initial real(kind=real64), public, parameter :: ecx_core_PI = 4.0d0*datan(1.0d0) PI real(kind=real64), public, parameter :: ecx_core_T_K = 273.15d0 0°C in Kelvin. Functions public function ecx_core_assertEqual (x1, x2, n) result(r) Assert if two numbers are equal. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x1 First number to be compared. real(kind=real64), intent(in) :: x2 Second number to be compared. integer(kind=int32), intent(in) :: n Number of digits. Return Value logical Comparison result. public pure elemental function ecx_core_deg2rad (theta) result(phase) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: theta Angle in degrees. Return Value real(kind=real64) Angle in rad. public pure elemental function ecx_core_eV2nm (E) result(lambda) Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: E Energy in eV. Return Value real(kind=real64) Wavelength in nm. public pure elemental function ecx_core_kTe (T) result(r) Compute the thermal voltage. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Thermal voltage in V. public pure elemental function ecx_core_nm2eV (lambda) result(E) Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: lambda Wavelength in nm. Return Value real(kind=real64) Energy in eV. public pure elemental function ecx_core_rad2deg (phase) result(theta) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: phase Angle in rad. Return Value real(kind=real64) Angle in degrees. public pure elemental function ecx_core_roundn (x, n) result(r) Round x to n digits. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Number to be rounded. integer(kind=int32), intent(in) :: n Number of digits.s Return Value real(kind=real64) Rounded number Subroutines public pure subroutine ecx_core_linspace (start, end, x) Linear spaced 1d-array. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: start Starting value. real(kind=real64), intent(in) :: end Ending value (included). integer(kind=int32), intent(out) :: x (:) 1d-array where to put the linear spaced values. public pure subroutine ecx_core_logspace (start, end, x) Log spaced 1d-array. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: start Starting value. real(kind=real64), intent(in) :: end Ending value (included). integer(kind=int32), intent(out) :: x (:) 1d-array where to put the log spaced values.","tags":"","loc":"module/ecx__core.html"},{"title":"ecx__core_capi – ecx","text":"C API for the core module. Uses iso_c_binding ecx__core Contents Variables ecx_core_capi_PI ecx_core_capi_T_K Subroutines ecx_core_capi_kTe ecx_core_capi_nm2eV Variables Type Visibility Attributes Name Initial real(kind=c_double), protected, bind(C, name=\"0\") :: ecx_core_capi_PI = ecx_core_PI real(kind=c_double), protected, bind(C, name=\"0\") :: ecx_core_capi_T_K = ecx_core_T_K Subroutines public pure subroutine ecx_core_capi_kTe (T, kTe, n) bind(C) Compute the thermal voltage. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: T (n) Temperature in °C. real(kind=c_double), intent(out) :: kTe (n) Thermal voltage in V. integer(kind=c_size_t), intent(in), value :: n Size of T and kTe. public pure subroutine ecx_core_capi_nm2eV (lambda, E, n) bind(C, name=\"0\") Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lambda (n) Wavelength in nm. real(kind=c_double), intent(out) :: E (n) Energy in eV. integer(kind=c_size_t), intent(in), value :: n Size of lambda and E.","tags":"","loc":"module/ecx__core_capi.html"},{"title":"ecx__kinetics_capi – ecx","text":"Uses iso_c_binding ecx__kinetics iso_fortran_env Contents None","tags":"","loc":"module/ecx__kinetics_capi.html"},{"title":"ecx__pec – ecx","text":"Module for PEC. Uses iso_fortran_env ecx__core codata Contents None","tags":"","loc":"module/ecx__pec.html"},{"title":"ecx__eis_capi – ecx","text":"C API for the module EIS. Uses iso_c_binding iso_fortran_env ecx__eis Contents Subroutines ecx_capi_zc ecx_capi_zcpe ecx_capi_zl ecx_capi_zr ecx_capi_zw ecx_eis_capi_z Subroutines public pure subroutine ecx_capi_zc (w, C, n, Z) bind(C) @brief Compute the complex impedance for a capacitor. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] C Capacitance in Farad.\n@param[in] n Size of w and Z.\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: C integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) public pure subroutine ecx_capi_zcpe (w, Q, a, n, Z) bind(C) @brief Compute the complex impedance for a CPE. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] Q Resistance in S.s&#94;-a\n@param[in] a CPE exponent\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: Q real(kind=c_double), intent(in), value :: a integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) public pure subroutine ecx_capi_zl (w, L, n, Z) bind(C) @brief Compute the complex impedance for a inductor. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] L Inductance in Henry.\n@param[in] n Size of w and Z.\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: L integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) public pure subroutine ecx_capi_zr (w, R, n, Z) bind(C) @brief Compute the complex impedance for a resistor. \n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] R Resistance in Ohms.\n@param[in] n Size of w and Z.\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: R integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) public pure subroutine ecx_capi_zw (w, s, n, Z) bind(C) @brief Compute the complex impedance for a finite length warburg\n@param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array.\n@param[in] s Pseudo-Resistance in Ohms.s&#94;(1/2).\n@param[out] Z Complex impedance in Ohms as 1d-array. Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: w (n) real(kind=c_double), intent(in), value :: s integer(kind=c_size_t), intent(in), value :: n complex(kind=c_double_complex), intent(out) :: Z (n) public subroutine ecx_eis_capi_z (p, w, z, e, k, n, errstat) bind(C) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: p (k) real(kind=c_double), intent(in) :: w (n) complex(kind=c_double_complex), intent(out) :: z (n) character(kind=c_char,len=1), intent(in), value :: e integer(kind=c_size_t), intent(in), value :: k integer(kind=c_size_t), intent(in), value :: n integer(kind=c_int), intent(inout) :: errstat","tags":"","loc":"module/ecx__eis_capi.html"},{"title":"ecx_kinetics.f90 – ecx","text":"Contents Modules ecx__kinetics Source Code ecx_kinetics.f90 Source Code module ecx__kinetics !! Module for computing kinetics using the Butler-Volmer equations. use iso_fortran_env use codata use ecx__core implicit none private public :: ecx_kinetics_sbv contains pure elemental function ecx_kinetics_sbv ( U , OCV , j0 , aa , ac , za , zc , A , T ) result ( I ) !! Compute Butler Volmer equation without mass transport. real ( real64 ), intent ( in ) :: OCV !! Open Circuit Voltage in V. real ( real64 ), intent ( in ) :: U !! Electrochemical potential in V. real ( real64 ), intent ( in ) :: j0 !! Exchange current density in A.cm-2. real ( real64 ), intent ( in ) :: aa !! Anodic transfer coefficient. real ( real64 ), intent ( in ) :: ac !! Cathodic transfer coefficient. real ( real64 ), intent ( in ) :: za !! Number of exchnaged electrons in the anodic branch. real ( real64 ), intent ( in ) :: zc !! Number of exchnaged electrons in the cathodic branch. real ( real64 ), intent ( in ) :: A !! Area in cm2. real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: I real ( real64 ) :: kTe kTe = ecx_core_kTe ( T ) I = A * j0 * ( exp ( aa * za * ( U - OCV ) / kTe ) - exp ( - ac * zc * ( U - OCV ) / kTe )); end function end module","tags":"","loc":"sourcefile/ecx_kinetics.f90.html"},{"title":"ecx.f90 – ecx","text":"Contents Modules ecx Source Code ecx.f90 Source Code module ecx !! Main module for the ECX library. use ecx__core use ecx__kinetics use ecx__eis use ecx__pec end module","tags":"","loc":"sourcefile/ecx.f90.html"},{"title":"ecx_eis.f90 – ecx","text":"Contents Modules ecx__eis Source Code ecx_eis.f90 Source Code module ecx__eis !! Module containing functions and subroutines for Electrochemical Impedance Spectroscopy. use iso_fortran_env use ieee_arithmetic use ecx__core implicit none private type :: ecx_eis_error_messages_t integer ( int32 ) :: i character ( len = 64 ) :: msg end type type ( ecx_eis_error_messages_t ), parameter :: ecx_eis_errmsg ( 3 ) = & [ ecx_eis_error_messages_t ( 1 , \"Parameter array must be at least of size 3.\" ), & ecx_eis_error_messages_t ( 2 , \"Unknown element.\" ), & ecx_eis_error_messages_t ( 3 , \"n must be greater or equal to 1.\" )] public :: ecx_eis_z public :: ecx_eis_zr , ecx_eis_zc , ecx_eis_zl public :: ecx_eis_zw , ecx_eis_zflw , ecx_eis_zfsw public :: ecx_eis_zg , ecx_eis_zcpe public :: ecx_eis_errmsg contains pure elemental function ecx_eis_zr ( w , R ) result ( Z ) !! Compute the complex impedance for a resistor. implicit none real ( real64 ), intent ( in ) :: R !! Resistance in Ohms. real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. Z = cmplx ( R , 0.0d0 , kind = real64 ) end function pure elemental function ecx_eis_zc ( w , C ) result ( Z ) !! Compute the complex impedance for a capacitor. implicit none real ( real64 ), intent ( in ) :: C !! Capacitance in Farad. real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. Z = cmplx ( 0.0d0 , - 1.0d0 / ( C * w ), kind = real64 ) end function pure elemental function ecx_eis_zl ( w , L ) result ( Z ) !! Compute the complex impedance for an inductor. implicit none real ( real64 ), intent ( in ) :: L !! Inductance in Henry. real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. Z = cmplx ( 0.0d0 , L * w , kind = real64 ) end function pure elemental function ecx_eis_zcpe ( w , Q , a ) result ( Z ) !! Compute the complex impedance for a CPE. implicit none real ( real64 ), intent ( in ) :: Q !! Resistance in S.s&#94;-a real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. real ( real64 ), intent ( in ) :: a !! CPE exponent complex ( real64 ) :: Z !! Complex impedance in Ohms. real ( real64 ) :: mod mod = 1 / ( Q * w ** a ) Z = cmplx ( mod * cos ( a * ecx_core_PI / 2 ), - mod * sin ( a * ecx_core_PI / 2 ), kind = real64 ) end function pure elemental function ecx_eis_zw ( w , s ) result ( Z ) !! Compute the complex impedance for a semi-infinite Warburg. implicit none real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. real ( real64 ), intent ( in ) :: s !! Pseudo-Resistance in Ohms.s&#94;(1/2). complex ( real64 ) :: Z !! Complex impedance in Ohms. real ( real64 ) :: s2 s2 = s / sqrt ( w ) Z = cmplx ( s2 , - s2 , kind = real64 ) end function pure elemental function ecx_eis_zflw ( w , R , tau , n ) result ( Z ) !! @brief Compute the complex impedance for a finite length warburg implicit none real ( real64 ), intent ( in ) :: w !! Angular frequency in rad.s&#94;-1. real ( real64 ), intent ( in ) :: R !! Resistance in Ohms. real ( real64 ), intent ( in ) :: tau !! Characteristic time in s. real ( real64 ), intent ( in ) :: n !! Order of the fsw. complex ( real64 ) :: Z !! Complex impedance in Ohms. complex ( real64 ) :: x x = sqrt ( cmplx ( 0.0d0 , tau * w , kind = real64 )) x = x ** n Z = R / x * tanh ( x ) end function pure elemental function ecx_eis_zfsw ( w , R , tau , n ) result ( Z ) !! Compute the complex impedance for a finite space warburg implicit none real ( real64 ), intent ( in ) :: w !! Angular frequency in rad.s&#94;-1. real ( real64 ), intent ( in ) :: R !! Resistance in Ohms. real ( real64 ), intent ( in ) :: tau !! Characteristic time in s. real ( real64 ), intent ( in ) :: n !! Order of the fsw. complex ( real64 ) :: Z !! Complex impedance in Ohms. complex ( real64 ) :: x x = cmplx ( 0.0d0 , tau * w , kind = real64 ) x = x ** n Z = R / ( x * tanh ( x )) end function pure elemental function ecx_eis_zg ( w , G , K ) result ( Z ) !! Compute the complex impedance of the Gerisher element. implicit none real ( real64 ), intent ( in ) :: w !! Angular frequency in rad.s&#94;-1. real ( real64 ), intent ( in ) :: G !! Pseudo-Resistance in Ohms.s&#94;(1/2). real ( real64 ), intent ( in ) :: K !! Offset in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. complex ( real64 ) :: x x = cmplx ( 0.0d0 , w , kind = real64 ) Z = G / sqrt ( K + x ) end function pure subroutine ecx_eis_z ( p , w , z , e , errstat ) !! Compute the complex impedance for the given element. implicit none character ( len = 1 ), intent ( in ) :: e !! Electrochemical element: R, C, L, Q, O, T, G integer ( int32 ), intent ( out ) :: errstat !! Error status real ( real64 ), intent ( in ) :: p (:) !! Parameters. real ( real64 ), intent ( in ) :: w (:) !! Angular frequencies in rad.s-1 complex ( real64 ), intent ( out ) :: z (:) !! Complex impedance in Ohms. errstat = 0 if ( size ( p ) < 3 ) then errstat = 1 z = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), & ieee_value ( 0.0d0 , ieee_quiet_nan ), & real64 ) else select case ( e ) case ( \"R\" ) z = ecx_eis_zr ( w , p ( 1 )) case ( \"C\" ) z = ecx_eis_zc ( w , p ( 1 )) case ( \"L\" ) z = ecx_eis_zl ( w , p ( 1 )) case ( \"W\" ) z = ecx_eis_zw ( w , p ( 1 )) case ( \"Q\" ) z = ecx_eis_zcpe ( w , p ( 1 ), p ( 2 )) case ( \"O\" ) z = ecx_eis_zflw ( w , p ( 1 ), p ( 2 ), p ( 3 )) case ( \"T\" ) z = ecx_eis_zfsw ( w , p ( 1 ), p ( 2 ), p ( 3 )) case ( \"G\" ) z = ecx_eis_zg ( w , p ( 1 ), p ( 2 )) case DEFAULT errstat = 2 z = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), & ieee_value ( 0.0d0 , ieee_quiet_nan ), & real64 ) end select endif end subroutine pure subroutine ecx_eis_mm ( p , w , z , n ) !! Compute the measurement model. real ( real64 ), intent ( in ) :: p (:) !! Parameters. real ( real64 ), intent ( in ) :: w (:) !! Angular frequencies in rad.s-1 complex ( real64 ), intent ( out ) :: z (:) !! Complex impedance in Ohms. integer ( int32 ), intent ( in ) :: n !! Number of voigt elements. integer ( int32 ) :: i integer ( int32 ) :: errstat complex ( real64 ) :: zr ( size ( z )) complex ( real64 ) :: zc ( size ( z )) if ( n < 1 ) then errstat = 3 z = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), & ieee_value ( 0.0d0 , ieee_quiet_nan ), & real64 ) else call ecx_eis_z ( p , w , z , \"R\" , errstat ) do i = 1 , n - 2 call ecx_eis_z ( p ( i + 1 :), w , zr , \"R\" , errstat ) call ecx_eis_z ( p ( i + 2 :), w , zc , \"C\" , errstat ) z = z + ( zr * zc ) / ( zr + zc ) enddo endif end subroutine end module","tags":"","loc":"sourcefile/ecx_eis.f90.html"},{"title":"ecx_core.f90 – ecx","text":"Contents Modules ecx__core Source Code ecx_core.f90 Source Code module ecx__core !! Module for constants and utilities functions used in the ECX library. use iso_fortran_env use ieee_arithmetic use codata implicit none real ( real64 ), parameter :: ecx_core_PI = 4.0d0 * datan ( 1.0d0 ) !! PI real ( real64 ), parameter :: ecx_core_T_K = 27 3.15d0 !! 0°C in Kelvin. contains pure elemental function ecx_core_roundn ( x , n ) result ( r ) !! Round x to n digits. implicit none real ( real64 ), intent ( in ) :: x !! Number to be rounded. integer ( int32 ), intent ( in ) :: n !! Number of digits.s real ( real64 ) :: r !! Rounded number real ( real64 ) :: fac fac = 10 ** n r = nint ( x * fac , kind = kind ( x )) / fac end function function ecx_core_assertEqual ( x1 , x2 , n ) result ( r ) !! Assert if two numbers are equal. implicit none real ( real64 ), intent ( in ) :: x1 !! First number to be compared. real ( real64 ), intent ( in ) :: x2 !! Second number to be compared. integer ( int32 ), intent ( in ) :: n !! Number of digits. logical :: r !! Comparison result. real ( real64 ) :: fac real ( real64 ) :: ix1 real ( real64 ) :: ix2 if ( ieee_is_nan ( x1 ) . or . ieee_is_nan ( x2 )) then r = . false . else fac = 10 ** n ix1 = nint ( x1 * fac , kind = kind ( n )) ix2 = nint ( x2 * fac , kind = kind ( n )) r = ix1 == ix2 endif end function pure subroutine ecx_core_linspace ( start , end , x ) !! Linear spaced 1d-array. real ( real64 ), intent ( in ) :: start !! Starting value. real ( real64 ), intent ( in ) :: end !! Ending value (included). integer ( int32 ), intent ( out ) :: x (:) !! 1d-array where to put the linear spaced values. real ( real64 ) :: dx integer ( int32 ) :: n , i n = size ( x ) dx = ( end - start ) / ( n - 1 ) do i = 1 , n x ( i ) = start + dx * ( i - 1 ) end do end subroutine pure subroutine ecx_core_logspace ( start , end , x ) !! Log spaced 1d-array. real ( real64 ), intent ( in ) :: start !! Starting value. real ( real64 ), intent ( in ) :: end !! Ending value (included). integer ( int32 ), intent ( out ) :: x (:) !! 1d-array where to put the log spaced values. call ecx_core_linspace ( start , end , x ) x (:) = 1 0.0d0 ** x (:) end subroutine pure elemental function ecx_core_nm2eV ( lambda ) result ( E ) !! Convert wavelength to energy implicit none real ( real64 ), intent ( in ) :: lambda !! Wavelength in nm. real ( real64 ) :: E !! Energy in eV. E = PLANCK_CONSTANT_IN_EV_HZ * SPEED_OF_LIGHT_IN_VACUUM / ( lambda * 1.0d-9 ) end function pure elemental function ecx_core_eV2nm ( E ) result ( lambda ) !! Convert wavelength to energy implicit none real ( real64 ), intent ( in ) :: E !! Energy in eV. real ( real64 ) :: lambda !! Wavelength in nm. lambda = PLANCK_CONSTANT_IN_EV_HZ * SPEED_OF_LIGHT_IN_VACUUM / ( E * 1.0d-9 ) end function pure elemental function ecx_core_deg2rad ( theta ) result ( phase ) !! Converts degrees to rad. implicit none real ( real64 ), intent ( in ) :: theta !! Angle in degrees. real ( real64 ) :: phase !! Angle in rad. phase = theta * ecx_core_PI / 18 0.0d0 end pure elemental function ecx_core_rad2deg ( phase ) result ( theta ) !! Converts degrees to rad. implicit none real ( real64 ), intent ( in ) :: phase !! Angle in rad. real ( real64 ) :: theta !! Angle in degrees. theta = phase * 18 0.0d0 / ecx_core_PI end pure elemental function ecx_core_kTe ( T ) result ( r ) !! Compute the thermal voltage. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: r !! Thermal voltage in V. r = ( T + ecx_core_T_K ) * BOLTZMANN_CONSTANT_IN_EV_K end function end module","tags":"","loc":"sourcefile/ecx_core.f90.html"},{"title":"ecx_core_capi.f90 – ecx","text":"Contents Modules ecx__core_capi Source Code ecx_core_capi.f90 Source Code module ecx__core_capi !! C API for the core module. use iso_c_binding , only : c_double use ecx__core implicit none real ( c_double ), protected , bind ( C , name = \"ecx_core_capi_PI\" ) :: & ecx_core_capi_PI = ecx_core_PI real ( c_double ), protected , bind ( C , name = \"T_K\" ) :: & ecx_core_capi_T_K = ecx_core_T_K contains pure subroutine ecx_core_capi_nm2eV ( lambda , E , n ) bind ( C , name = \"ecx_core_capi_nm2eV\" ) !! Convert wavelength to energy implicit none integer ( c_size_t ), intent ( in ), value :: n !! Size of lambda and E. real ( c_double ), intent ( in ) :: lambda ( n ) !! Wavelength in nm. real ( c_double ), intent ( out ) :: E ( n ) !! Energy in eV. E = ecx_core_nm2eV ( lambda ) end subroutine pure subroutine ecx_core_capi_kTe ( T , kTe , n ) bind ( C ) !! Compute the thermal voltage. integer ( c_size_t ), intent ( in ), value :: n !! Size of T and kTe. real ( c_double ), intent ( in ) :: T ( n ) !! Temperature in °C. real ( c_double ), intent ( out ) :: kTe ( n ) !! Thermal voltage in V. kTe = ecx_core_kTe ( T ) end subroutine end module","tags":"","loc":"sourcefile/ecx_core_capi.f90.html"},{"title":"ecx_kinetics_capi.f90 – ecx","text":"Contents Modules ecx__kinetics_capi Source Code ecx_kinetics_capi.f90 Source Code module ecx__kinetics_capi use iso_fortran_env use iso_c_binding use ecx__kinetics implicit none private contains pure subroutine ecx_kinetics_capi_sbv ( U , OCV , j0 , aa , ac , za , zc , A , T , I , n ) bind ( c ) !! Compute Butler Volmer equation without mass transport. ! arguments integer ( c_size_t ), intent ( in ), value :: n !! Size of U and I. real ( c_double ), intent ( in ), value :: OCV !! Open circuit potential in volts. real ( c_double ), intent ( in ) :: U ( n ) !! Potential in volts. real ( c_double ), intent ( in ), value :: j0 !! Exchange current density in A.cm-2 real ( c_double ), intent ( in ), value :: aa !! Anodic transfert coefficient. real ( c_double ), intent ( in ), value :: ac !! Cathodic transfert coefficient. real ( c_double ), intent ( in ), value :: za !! Number of exchanged electrons in anodic branch. real ( c_double ), intent ( in ), value :: zc !! Number of exchanged electrons in cathodic branch. real ( c_double ), intent ( in ), value :: A !! Area in cm2. real ( c_double ), intent ( in ), value :: T !! Temperature in °C. real ( c_double ), intent ( out ) :: I ( n ) !! Current in A. I = ecx_kinetics_sbv ( U , OCV , j0 , aa , ac , za , zc , A , T ) end subroutine end module","tags":"","loc":"sourcefile/ecx_kinetics_capi.f90.html"},{"title":"ecx_pec.f90 – ecx","text":"Contents Modules ecx__pec Source Code ecx_pec.f90 Source Code module ecx__pec !! Module for PEC. use iso_fortran_env use ecx__core use codata implicit none private contains pure elemental function ecx_pec_alpha ( hv , Eg , n ) result ( alpha ) !! Compute the not scaled absorbance coefficient. implicit none real ( real64 ), intent ( in ) :: hv !! Light energy in eV. real ( real64 ), intent ( in ) :: Eg !! Bandgap in eV. real ( real64 ), intent ( in ) :: n !! Exponent for direct (1/2) or indirect transition (2) real ( real64 ) :: alpha !! Absorbance coefficient in eV. real ( real64 ) :: d d = hv - Eg if ( d > 0.0d0 ) then alpha = ( hv - Eg ) ** n / hv else alpha = 0.0d0 endif end function pure elemental function ecx_pec_iph ( hv , K , Eg , theta , n ) result ( iph ) !! Compute the complex photocurrent implicit none real ( real64 ), intent ( in ) :: hv !! hv Light energy in eV. real ( real64 ), intent ( in ) :: K !! Scaling factor for absorbance in . real ( real64 ), intent ( in ) :: Eg !! Bandgap in eV. real ( real64 ), intent ( in ) :: theta !! Phase in degrees. real ( real64 ), intent ( in ) :: n !! Transition type: n=1/2 for direct transition and n=2 for indirect transition complex ( real64 ) :: iph !! @return iph Complex photocurrent. real ( real64 ) :: re , im , mod , phase phase = ecx_core_deg2rad ( theta ) mod = K ** n * ecx_pec_alpha ( hv , Eg , n ) re = mod * cos ( phase ) im = mod * sin ( phase ) iph = cmplx ( re , im , kind = real64 ) end function end module","tags":"","loc":"sourcefile/ecx_pec.f90.html"},{"title":"ecx_eis_capi.f90 – ecx","text":"Contents Modules ecx__eis_capi Source Code ecx_eis_capi.f90 Source Code module ecx__eis_capi !! C API for the module EIS. use iso_fortran_env use iso_c_binding use ecx__eis implicit none contains !> @brief Compute the complex impedance for a resistor. !! @param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array. !! @param[in] R Resistance in Ohms. !! @param[in] n Size of w and Z. !! @param[out] Z Complex impedance in Ohms as 1d-array. pure subroutine ecx_capi_zr ( w , R , n , Z ) bind ( C ) implicit none integer ( c_size_t ), intent ( in ), value :: n real ( c_double ), intent ( in ), value :: R real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: Z ( n ) Z (:) = ecx_eis_zr ( w , R ) end subroutine !> @brief Compute the complex impedance for a capacitor. !! @param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array. !! @param[in] C Capacitance in Farad. !! @param[in] n Size of w and Z. !! @param[out] Z Complex impedance in Ohms as 1d-array. pure subroutine ecx_capi_zc ( w , C , n , Z ) bind ( C ) implicit none integer ( c_size_t ), intent ( in ), value :: n real ( c_double ), intent ( in ), value :: C real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: Z ( n ) Z (:) = ecx_eis_zc ( w , C ) end subroutine !> @brief Compute the complex impedance for a inductor. !! @param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array. !! @param[in] L Inductance in Henry. !! @param[in] n Size of w and Z. !! @param[out] Z Complex impedance in Ohms as 1d-array. pure subroutine ecx_capi_zl ( w , L , n , Z ) bind ( C ) implicit none integer ( c_size_t ), intent ( in ), value :: n real ( c_double ), intent ( in ), value :: L real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: Z ( n ) Z (:) = ecx_eis_zl ( w , L ) end subroutine !> @brief Compute the complex impedance for a CPE. !! @param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array. !! @param[in] Q Resistance in S.s&#94;-a !! @param[in] a CPE exponent !! @param[out] Z Complex impedance in Ohms as 1d-array. pure subroutine ecx_capi_zcpe ( w , Q , a , n , Z ) bind ( C ) implicit none integer ( c_size_t ), intent ( in ), value :: n real ( c_double ), intent ( in ), value :: Q real ( c_double ), intent ( in ), value :: a real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: Z ( n ) Z (:) = ecx_eis_zcpe ( w , Q , a ) end subroutine !> @brief Compute the complex impedance for a finite length warburg !! @param[in] w Angular frequencies in rad.s&#94;-1 as 1d-array. !! @param[in] s Pseudo-Resistance in Ohms.s&#94;(1/2). !! @param[out] Z Complex impedance in Ohms as 1d-array. pure subroutine ecx_capi_zw ( w , s , n , Z ) bind ( C ) implicit none integer ( c_size_t ), intent ( in ), value :: n real ( c_double ), intent ( in ), value :: s real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: Z ( n ) Z (:) = ecx_eis_zw ( w , s ) end subroutine subroutine ecx_eis_capi_z ( p , w , z , e , k , n , errstat ) bind ( C ) implicit none integer ( c_size_t ), intent ( in ), value :: n integer ( c_size_t ), intent ( in ), value :: k character ( len = 1 , kind = c_char ), intent ( in ), value :: e integer ( c_int ), intent ( inout ) :: errstat real ( c_double ), intent ( in ) :: p ( k ) real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: z ( n ) call ecx_eis_z ( p , w , z , e , errstat ) end subroutine end module","tags":"","loc":"sourcefile/ecx_eis_capi.f90.html"}]}