var tipuesearch = {"pages":[{"title":" ecx ","text":"ecx Introduction Dependencies Installation License Introduction ecx is a Fortran library providing formulas for electrochemistry. To use ecx within your fpm <https://github.com/fortran-lang/fpm> _ project,\nadd the following to your fpm.toml file: [ dependencies ] ecx = { git = \"https://github.com/MilanSkocic/ecx.git\" } Dependencies gcc>=10\ngfortran>=10\nfpm>=0.7\ncodata==0.10.0 Installation A Makefile is provided, which uses fpm , for building the library. On windows, msys2 needs to be installed. \n  Add the msys2 binary (usually C:\\msys64\\usr\\bin) to the path in order to be able to use make. On Darwin, the gcc toolchain needs to be installed. Build: the configuration file will set all the environment variables necessary for the compilation chmod +x configure.sh\n    . ./configure.sh\n    make Run tests make test Install make install Uninstall make uninstall License MIT Developer Info Milan Skocic","tags":"home","loc":"index.html"},{"title":"assertEqual – ecx","text":"public  function assertEqual(x1, x2, n) result(r) Assert if two numbers are equal. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x1 First number to be compared. real(kind=real64), intent(in) :: x2 Second number to be compared. integer(kind=int32), intent(in) :: n Number of digits. Return Value logical Comparison result.","tags":"","loc":"proc/assertequal.html"},{"title":"deg2rad – ecx","text":"public pure elemental function deg2rad(theta) result(phase) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: theta Angle in degrees. Return Value real(kind=real64) Angle in rad. Called by proc~~deg2rad~~CalledByGraph proc~deg2rad deg2rad proc~iph iph proc~iph->proc~deg2rad Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/deg2rad.html"},{"title":"kTe – ecx","text":"public pure elemental function kTe(T) result(r) Compute the thermal voltage. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Thermal voltage in V. Called by proc~~kte~~CalledByGraph proc~kte kTe proc~ecx_kinetics_bv ecx_kinetics_bv proc~ecx_kinetics_bv->proc~kte proc~ecx_kinetics_sbv ecx_kinetics_sbv proc~ecx_kinetics_bv->proc~ecx_kinetics_sbv proc~ecx_kinetics_nernst ecx_kinetics_nernst proc~ecx_kinetics_nernst->proc~kte proc~ecx_kinetics_sbv->proc~kte Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/kte.html"},{"title":"nm2eV – ecx","text":"public pure elemental function nm2eV(lambda) result(E) Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: lambda Wavelength in nm. Return Value real(kind=real64) Energy in eV.","tags":"","loc":"proc/nm2ev.html"},{"title":"rad2deg – ecx","text":"public pure elemental function rad2deg(phase) result(theta) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: phase Angle in rad. Return Value real(kind=real64) Angle in degrees.","tags":"","loc":"proc/rad2deg.html"},{"title":"roundn – ecx","text":"public pure elemental function roundn(x, n) result(r) Round x to n digits. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Number to be rounded. integer(kind=int32), intent(in) :: n Number of digits.s Return Value real(kind=real64) Rounded number","tags":"","loc":"proc/roundn.html"},{"title":"capi_z – ecx","text":"public  subroutine capi_z(p, w, zout, e, k, n, errstat, errmsg) bind(C, name=\"ecx_eis_z\") @brief C API - Compute the complex impedance for the given element.\n@param[in] p Parameters.\n@param[in] w Angular frequencies in rad.s-1\n@param[in] zout Complex impedance in Ohms.\n@param[in] e Electrochemical element: R, C, L, Q, O, T, G\n@param[in] k Size of p\n@param[in] n Size of w\n@param[in] errstat Error status\n@param[in] errmsg Error message Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: p (k) real(kind=c_double), intent(in) :: w (n) complex(kind=c_double_complex), intent(out) :: zout (n) character(kind=c_char, len=1), intent(in), value :: e integer(kind=c_size_t), intent(in), value :: k integer(kind=c_size_t), intent(in), value :: n integer(kind=c_int), intent(out) :: errstat type(c_ptr), intent(out) :: errmsg Calls proc~~capi_z~~CallsGraph proc~capi_z capi_z proc~z z proc~capi_z->proc~z Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/capi_z.html"},{"title":"z – ecx","text":"public  subroutine z(p, w, zout, e, errstat, errmsg) @brief Compute the complex impedance for the given element.\n@param[in] p Parameters.\n@param[in] w Angular frequencies in rad.s-1\n@param[in] zout Complex impedance in Ohms.\n@param[in] e Electrochemical element: R, C, L, Q, O, T, G\n@param[in] k Size of p\n@param[in] n Size of w\n@param[in] errstat Error status\n@param[in] errmsg Error message Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: p (:) real(kind=real64), intent(in) :: w (:) complex(kind=real64), intent(out) :: zout (:) character(len=1), intent(in) :: e integer(kind=int32), intent(out) :: errstat character(len=:), intent(out), pointer :: errmsg Called by proc~~z~~CalledByGraph proc~z z proc~capi_z capi_z proc~capi_z->proc~z Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/z.html"},{"title":"get_version – ecx","text":"public  function get_version() result(fptr) Get the version. \nReturns Arguments None Return Value character(len=:), pointer Pointer to the version string. Called by proc~~get_version~~CalledByGraph proc~get_version get_version proc~capi_get_version capi_get_version proc~capi_get_version->proc~get_version Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_version.html"},{"title":"alpha – ecx","text":"public pure elemental function alpha(hv, Eg, n) result(res) @brief Compute the not scaled absorbance coefficient.\n@param[in] hv Light energy in eV.\n@param[in] Eg Bandgap in eV.\n@param[in] n Exponent for direct (1/2) or indirect transition (2)\n@return Absorbance coefficient in eV. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: hv real(kind=real64), intent(in) :: Eg real(kind=real64), intent(in) :: n Return Value real(kind=real64) Called by proc~~alpha~~CalledByGraph proc~alpha alpha proc~iph iph proc~iph->proc~alpha Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/alpha.html"},{"title":"iph – ecx","text":"public pure elemental function iph(hv, K, Eg, theta, n) result(res) @brief Compute the complex photocurrent\n@param[in] hv Light energy in eV.\n@param[in] K Scaling factor for absorbance in .\n@param[in] Eg Bandgap in eV.\n@param[in] theta Phase in degrees.\n@param[in] n Transition type: n=1/2 for direct transition and n=2 for indirect transition\n@return iph Complex photocurrent. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: hv real(kind=real64), intent(in) :: K real(kind=real64), intent(in) :: Eg real(kind=real64), intent(in) :: theta real(kind=real64), intent(in) :: n Return Value complex(kind=real64) Calls proc~~iph~~CallsGraph proc~iph iph proc~alpha alpha proc~iph->proc~alpha proc~deg2rad deg2rad proc~iph->proc~deg2rad Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/iph.html"},{"title":"capi_get_version – ecx","text":"public  function capi_get_version() result(cptr) bind(c, name=\"ecx_get_version\")) Get the version. Arguments None Return Value type(c_ptr) Pointer to version string. Calls proc~~capi_get_version~~CallsGraph proc~capi_get_version capi_get_version proc~get_version get_version proc~capi_get_version->proc~get_version Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/capi_get_version.html"},{"title":"ecx_kinetics_bv – ecx","text":"public pure elemental function ecx_kinetics_bv(U, OCV, j0, jdla, jdlc, aa, ac, za, zc, A, T) result(I) Compute Butler Volmer equation with mass transport. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: U Electrochemical potential in V. real(kind=real64), intent(in) :: OCV Open Circuit Voltage in V. real(kind=real64), intent(in) :: j0 Exchange current density in A.cm-2. real(kind=real64), intent(in) :: jdla Anodic diffusion limiting current density in A.cm-2. real(kind=real64), intent(in) :: jdlc Cathodic diffusion limiting current density in A.cm-2. real(kind=real64), intent(in) :: aa Anodic transfer coefficient. real(kind=real64), intent(in) :: ac Cathodic transfer coefficient. real(kind=real64), intent(in) :: za Number of exchnaged electrons in the anodic branch. real(kind=real64), intent(in) :: zc Number of exchnaged electrons in the cathodic branch. real(kind=real64), intent(in) :: A Area in cm2. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Calls proc~~ecx_kinetics_bv~~CallsGraph proc~ecx_kinetics_bv ecx_kinetics_bv proc~ecx_kinetics_sbv ecx_kinetics_sbv proc~ecx_kinetics_bv->proc~ecx_kinetics_sbv proc~kte kTe proc~ecx_kinetics_bv->proc~kte proc~ecx_kinetics_sbv->proc~kte Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/ecx_kinetics_bv.html"},{"title":"ecx_kinetics_nernst – ecx","text":"public pure function ecx_kinetics_nernst(E0, z, aox, vox, ared, vred, T) result(E) Compute the Nernst electrochemical potential in V. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: E0 Standard electrochemical potential in V. integer(kind=int32), intent(in) :: z Number of exchanged electrons. real(kind=real64), intent(in) :: aox (:) Activities of the oxidants. real(kind=real64), intent(in) :: vox (:) Coefficients for the oxidants. real(kind=real64), intent(in) :: ared (:) Activities of the reductants real(kind=real64), intent(in) :: vred (:) Coefficients for the reductants. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Calls proc~~ecx_kinetics_nernst~~CallsGraph proc~ecx_kinetics_nernst ecx_kinetics_nernst proc~kte kTe proc~ecx_kinetics_nernst->proc~kte Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/ecx_kinetics_nernst.html"},{"title":"ecx_kinetics_sbv – ecx","text":"public pure elemental function ecx_kinetics_sbv(U, OCV, j0, aa, ac, za, zc, A, T) result(I) Compute Butler Volmer equation without mass transport. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: U Electrochemical potential in V. real(kind=real64), intent(in) :: OCV Open Circuit Voltage in V. real(kind=real64), intent(in) :: j0 Exchange current density in A.cm-2. real(kind=real64), intent(in) :: aa Anodic transfer coefficient. real(kind=real64), intent(in) :: ac Cathodic transfer coefficient. real(kind=real64), intent(in) :: za Number of exchnaged electrons in the anodic branch. real(kind=real64), intent(in) :: zc Number of exchnaged electrons in the cathodic branch. real(kind=real64), intent(in) :: A Area in cm2. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Calls proc~~ecx_kinetics_sbv~~CallsGraph proc~ecx_kinetics_sbv ecx_kinetics_sbv proc~kte kTe proc~ecx_kinetics_sbv->proc~kte Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~ecx_kinetics_sbv~~CalledByGraph proc~ecx_kinetics_sbv ecx_kinetics_sbv proc~ecx_kinetics_bv ecx_kinetics_bv proc~ecx_kinetics_bv->proc~ecx_kinetics_sbv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/ecx_kinetics_sbv.html"},{"title":"ecx__core – ecx","text":"@file\n@brief Core module.\n@brief Core module. Uses iso_fortran_env stdlib_kinds stdlib_math codata iso_c_binding ieee_arithmetic module~~ecx__core~~UsesGraph module~ecx__core ecx__core codata codata module~ecx__core->codata ieee_arithmetic ieee_arithmetic module~ecx__core->ieee_arithmetic iso_c_binding iso_c_binding module~ecx__core->iso_c_binding iso_fortran_env iso_fortran_env module~ecx__core->iso_fortran_env stdlib_kinds stdlib_kinds module~ecx__core->stdlib_kinds stdlib_math stdlib_math module~ecx__core->stdlib_math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~ecx__core~~UsedByGraph module~ecx__core ecx__core module~ecx ecx module~ecx->module~ecx__core module~ecx__eis ecx__eis module~ecx->module~ecx__eis module~ecx__kinetics ecx__kinetics module~ecx->module~ecx__kinetics module~ecx__pec ecx__pec module~ecx->module~ecx__pec module~ecx__eis->module~ecx__core module~ecx__kinetics->module~ecx__core module~ecx__pec->module~ecx__core module~ecx__kinetics_capi ecx__kinetics_capi module~ecx__kinetics_capi->module~ecx__kinetics Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial real(kind=real64), public, parameter :: PI = 4.0d0*datan(1.0d0) PI real(kind=real64), public, parameter :: T_K = 273.15d0 0°C in Kelvin. real(kind=c_double), public, bind(C, name=\"0\") :: capi_PI = PI real(kind=c_double), public, bind(C, name=\"0\") :: capi_T_K = T_K Functions public  function assertEqual (x1, x2, n) result(r) Assert if two numbers are equal. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x1 First number to be compared. real(kind=real64), intent(in) :: x2 Second number to be compared. integer(kind=int32), intent(in) :: n Number of digits. Return Value logical Comparison result. public pure elemental function deg2rad (theta) result(phase) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: theta Angle in degrees. Return Value real(kind=real64) Angle in rad. public pure elemental function kTe (T) result(r) Compute the thermal voltage. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) Thermal voltage in V. public pure elemental function nm2eV (lambda) result(E) Convert wavelength to energy Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: lambda Wavelength in nm. Return Value real(kind=real64) Energy in eV. public pure elemental function rad2deg (phase) result(theta) Converts degrees to rad. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: phase Angle in rad. Return Value real(kind=real64) Angle in degrees. public pure elemental function roundn (x, n) result(r) Round x to n digits. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: x Number to be rounded. integer(kind=int32), intent(in) :: n Number of digits.s Return Value real(kind=real64) Rounded number","tags":"","loc":"module/ecx__core.html"},{"title":"ecx__eis – ecx","text":"EIS module Uses iso_c_binding ecx__core iso_fortran_env ieee_arithmetic module~~ecx__eis~~UsesGraph module~ecx__eis ecx__eis ieee_arithmetic ieee_arithmetic module~ecx__eis->ieee_arithmetic iso_c_binding iso_c_binding module~ecx__eis->iso_c_binding iso_fortran_env iso_fortran_env module~ecx__eis->iso_fortran_env module~ecx__core ecx__core module~ecx__eis->module~ecx__core module~ecx__core->ieee_arithmetic module~ecx__core->iso_c_binding module~ecx__core->iso_fortran_env codata codata module~ecx__core->codata stdlib_kinds stdlib_kinds module~ecx__core->stdlib_kinds stdlib_math stdlib_math module~ecx__core->stdlib_math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~ecx__eis~~UsedByGraph module~ecx__eis ecx__eis module~ecx ecx module~ecx->module~ecx__eis Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines public  subroutine capi_z (p, w, zout, e, k, n, errstat, errmsg) bind(C, name=\"ecx_eis_z\") @brief C API - Compute the complex impedance for the given element.\n@param[in] p Parameters.\n@param[in] w Angular frequencies in rad.s-1\n@param[in] zout Complex impedance in Ohms.\n@param[in] e Electrochemical element: R, C, L, Q, O, T, G\n@param[in] k Size of p\n@param[in] n Size of w\n@param[in] errstat Error status\n@param[in] errmsg Error message Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: p (k) real(kind=c_double), intent(in) :: w (n) complex(kind=c_double_complex), intent(out) :: zout (n) character(kind=c_char, len=1), intent(in), value :: e integer(kind=c_size_t), intent(in), value :: k integer(kind=c_size_t), intent(in), value :: n integer(kind=c_int), intent(out) :: errstat type(c_ptr), intent(out) :: errmsg public  subroutine z (p, w, zout, e, errstat, errmsg) @brief Compute the complex impedance for the given element.\n@param[in] p Parameters.\n@param[in] w Angular frequencies in rad.s-1\n@param[in] zout Complex impedance in Ohms.\n@param[in] e Electrochemical element: R, C, L, Q, O, T, G\n@param[in] k Size of p\n@param[in] n Size of w\n@param[in] errstat Error status\n@param[in] errmsg Error message Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: p (:) real(kind=real64), intent(in) :: w (:) complex(kind=real64), intent(out) :: zout (:) character(len=1), intent(in) :: e integer(kind=int32), intent(out) :: errstat character(len=:), intent(out), pointer :: errmsg","tags":"","loc":"module/ecx__eis.html"},{"title":"ecx__kinetics_capi – ecx","text":"Uses iso_c_binding iso_fortran_env ecx__kinetics module~~ecx__kinetics_capi~~UsesGraph module~ecx__kinetics_capi ecx__kinetics_capi iso_c_binding iso_c_binding module~ecx__kinetics_capi->iso_c_binding iso_fortran_env iso_fortran_env module~ecx__kinetics_capi->iso_fortran_env module~ecx__kinetics ecx__kinetics module~ecx__kinetics_capi->module~ecx__kinetics module~ecx__kinetics->iso_fortran_env module~ecx__core ecx__core module~ecx__kinetics->module~ecx__core module~ecx__core->iso_c_binding module~ecx__core->iso_fortran_env codata codata module~ecx__core->codata ieee_arithmetic ieee_arithmetic module~ecx__core->ieee_arithmetic stdlib_kinds stdlib_kinds module~ecx__core->stdlib_kinds stdlib_math stdlib_math module~ecx__core->stdlib_math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module/ecx__kinetics_capi.html"},{"title":"ecx__version – ecx","text":"Version Used by module~~ecx__version~~UsedByGraph module~ecx__version ecx__version module~capi__version capi__version module~capi__version->module~ecx__version module~ecx ecx module~ecx->module~ecx__version module~capi capi module~ecx->module~capi module~capi->module~capi__version Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public  function get_version () result(fptr) Get the version. \nReturns Arguments None Return Value character(len=:), pointer Pointer to the version string.","tags":"","loc":"module/ecx__version.html"},{"title":"ecx__pec – ecx","text":"@file\n@brief PEC Module.\n@brief PEC Module. Uses ecx__core iso_fortran_env module~~ecx__pec~~UsesGraph module~ecx__pec ecx__pec iso_fortran_env iso_fortran_env module~ecx__pec->iso_fortran_env module~ecx__core ecx__core module~ecx__pec->module~ecx__core module~ecx__core->iso_fortran_env codata codata module~ecx__core->codata ieee_arithmetic ieee_arithmetic module~ecx__core->ieee_arithmetic iso_c_binding iso_c_binding module~ecx__core->iso_c_binding stdlib_kinds stdlib_kinds module~ecx__core->stdlib_kinds stdlib_math stdlib_math module~ecx__core->stdlib_math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~ecx__pec~~UsedByGraph module~ecx__pec ecx__pec module~ecx ecx module~ecx->module~ecx__pec Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public pure elemental function alpha (hv, Eg, n) result(res) @brief Compute the not scaled absorbance coefficient.\n@param[in] hv Light energy in eV.\n@param[in] Eg Bandgap in eV.\n@param[in] n Exponent for direct (1/2) or indirect transition (2)\n@return Absorbance coefficient in eV. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: hv real(kind=real64), intent(in) :: Eg real(kind=real64), intent(in) :: n Return Value real(kind=real64) public pure elemental function iph (hv, K, Eg, theta, n) result(res) @brief Compute the complex photocurrent\n@param[in] hv Light energy in eV.\n@param[in] K Scaling factor for absorbance in .\n@param[in] Eg Bandgap in eV.\n@param[in] theta Phase in degrees.\n@param[in] n Transition type: n=1/2 for direct transition and n=2 for indirect transition\n@return iph Complex photocurrent. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: hv real(kind=real64), intent(in) :: K real(kind=real64), intent(in) :: Eg real(kind=real64), intent(in) :: theta real(kind=real64), intent(in) :: n Return Value complex(kind=real64)","tags":"","loc":"module/ecx__pec.html"},{"title":"capi – ecx","text":"Main module for ECX library: C API. Uses capi__version module~~capi~~UsesGraph module~capi capi module~capi__version capi__version module~capi->module~capi__version iso_c_binding iso_c_binding module~capi__version->iso_c_binding module~ecx__version ecx__version module~capi__version->module~ecx__version Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~capi~~UsedByGraph module~capi capi module~ecx ecx module~ecx->module~capi Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module/capi.html"},{"title":"capi__version – ecx","text":"version Uses iso_c_binding ecx__version module~~capi__version~~UsesGraph module~capi__version capi__version iso_c_binding iso_c_binding module~capi__version->iso_c_binding module~ecx__version ecx__version module~capi__version->module~ecx__version Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~capi__version~~UsedByGraph module~capi__version capi__version module~capi capi module~capi->module~capi__version module~ecx ecx module~ecx->module~capi Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public  function capi_get_version () result(cptr) bind(c, name=\"ecx_get_version\")) Get the version. Arguments None Return Value type(c_ptr) Pointer to version string.","tags":"","loc":"module/capi__version.html"},{"title":"ecx – ecx","text":"Main module for the ECX library. Uses ecx__pec ecx__kinetics capi ecx__eis ecx__core ecx__version module~~ecx~~UsesGraph module~ecx ecx module~capi capi module~ecx->module~capi module~ecx__core ecx__core module~ecx->module~ecx__core module~ecx__eis ecx__eis module~ecx->module~ecx__eis module~ecx__kinetics ecx__kinetics module~ecx->module~ecx__kinetics module~ecx__pec ecx__pec module~ecx->module~ecx__pec module~ecx__version ecx__version module~ecx->module~ecx__version module~capi__version capi__version module~capi->module~capi__version codata codata module~ecx__core->codata ieee_arithmetic ieee_arithmetic module~ecx__core->ieee_arithmetic iso_c_binding iso_c_binding module~ecx__core->iso_c_binding iso_fortran_env iso_fortran_env module~ecx__core->iso_fortran_env stdlib_kinds stdlib_kinds module~ecx__core->stdlib_kinds stdlib_math stdlib_math module~ecx__core->stdlib_math module~ecx__eis->module~ecx__core module~ecx__eis->ieee_arithmetic module~ecx__eis->iso_c_binding module~ecx__eis->iso_fortran_env module~ecx__kinetics->module~ecx__core module~ecx__kinetics->iso_fortran_env module~ecx__pec->module~ecx__core module~ecx__pec->iso_fortran_env module~capi__version->module~ecx__version module~capi__version->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module/ecx.html"},{"title":"ecx__kinetics – ecx","text":"Module for computing kinetics using the Butler-Volmer equations. Uses ecx__core iso_fortran_env module~~ecx__kinetics~~UsesGraph module~ecx__kinetics ecx__kinetics iso_fortran_env iso_fortran_env module~ecx__kinetics->iso_fortran_env module~ecx__core ecx__core module~ecx__kinetics->module~ecx__core module~ecx__core->iso_fortran_env codata codata module~ecx__core->codata ieee_arithmetic ieee_arithmetic module~ecx__core->ieee_arithmetic iso_c_binding iso_c_binding module~ecx__core->iso_c_binding stdlib_kinds stdlib_kinds module~ecx__core->stdlib_kinds stdlib_math stdlib_math module~ecx__core->stdlib_math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~ecx__kinetics~~UsedByGraph module~ecx__kinetics ecx__kinetics module~ecx ecx module~ecx->module~ecx__kinetics module~ecx__kinetics_capi ecx__kinetics_capi module~ecx__kinetics_capi->module~ecx__kinetics Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public pure elemental function ecx_kinetics_bv (U, OCV, j0, jdla, jdlc, aa, ac, za, zc, A, T) result(I) Compute Butler Volmer equation with mass transport. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: U Electrochemical potential in V. real(kind=real64), intent(in) :: OCV Open Circuit Voltage in V. real(kind=real64), intent(in) :: j0 Exchange current density in A.cm-2. real(kind=real64), intent(in) :: jdla Anodic diffusion limiting current density in A.cm-2. real(kind=real64), intent(in) :: jdlc Cathodic diffusion limiting current density in A.cm-2. real(kind=real64), intent(in) :: aa Anodic transfer coefficient. real(kind=real64), intent(in) :: ac Cathodic transfer coefficient. real(kind=real64), intent(in) :: za Number of exchnaged electrons in the anodic branch. real(kind=real64), intent(in) :: zc Number of exchnaged electrons in the cathodic branch. real(kind=real64), intent(in) :: A Area in cm2. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) public pure function ecx_kinetics_nernst (E0, z, aox, vox, ared, vred, T) result(E) Compute the Nernst electrochemical potential in V. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: E0 Standard electrochemical potential in V. integer(kind=int32), intent(in) :: z Number of exchanged electrons. real(kind=real64), intent(in) :: aox (:) Activities of the oxidants. real(kind=real64), intent(in) :: vox (:) Coefficients for the oxidants. real(kind=real64), intent(in) :: ared (:) Activities of the reductants real(kind=real64), intent(in) :: vred (:) Coefficients for the reductants. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64) public pure elemental function ecx_kinetics_sbv (U, OCV, j0, aa, ac, za, zc, A, T) result(I) Compute Butler Volmer equation without mass transport. Arguments Type Intent Optional Attributes Name real(kind=real64), intent(in) :: U Electrochemical potential in V. real(kind=real64), intent(in) :: OCV Open Circuit Voltage in V. real(kind=real64), intent(in) :: j0 Exchange current density in A.cm-2. real(kind=real64), intent(in) :: aa Anodic transfer coefficient. real(kind=real64), intent(in) :: ac Cathodic transfer coefficient. real(kind=real64), intent(in) :: za Number of exchnaged electrons in the anodic branch. real(kind=real64), intent(in) :: zc Number of exchnaged electrons in the cathodic branch. real(kind=real64), intent(in) :: A Area in cm2. real(kind=real64), intent(in) :: T Temperature in °C. Return Value real(kind=real64)","tags":"","loc":"module/ecx__kinetics.html"},{"title":"ecx_core.f90 – ecx","text":"Files dependent on this one sourcefile~~ecx_core.f90~~AfferentGraph sourcefile~ecx_core.f90 ecx_core.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~ecx_core.f90 sourcefile~ecx_eis.f90 ecx_eis.f90 sourcefile~ecx.f90->sourcefile~ecx_eis.f90 sourcefile~ecx_kinetics.f90 ecx_kinetics.f90 sourcefile~ecx.f90->sourcefile~ecx_kinetics.f90 sourcefile~ecx_pec.f90 ecx_pec.f90 sourcefile~ecx.f90->sourcefile~ecx_pec.f90 sourcefile~ecx_eis.f90->sourcefile~ecx_core.f90 sourcefile~ecx_kinetics.f90->sourcefile~ecx_core.f90 sourcefile~ecx_pec.f90->sourcefile~ecx_core.f90 sourcefile~ecx_kinetics_capi.f90 ecx_kinetics_capi.f90 sourcefile~ecx_kinetics_capi.f90->sourcefile~ecx_kinetics.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !> @file !! @brief Core module. !> @brief Core module. module ecx__core use iso_fortran_env use stdlib_kinds , only : dp , int32 use iso_c_binding , only : c_ptr , c_loc , c_double , c_size_t use ieee_arithmetic use codata , only : PLANCK_CONSTANT_IN_EV_HZ , & SPEED_OF_LIGHT_IN_VACUUM , & BOLTZMANN_CONSTANT_IN_EV_K use stdlib_math , only : linspace , logspace implicit none private real ( real64 ), parameter :: PI = 4.0d0 * datan ( 1.0d0 ) !! PI real ( real64 ), parameter :: T_K = 27 3.15d0 !! 0°C in Kelvin. real ( dp ), parameter :: kB_eV = BOLTZMANN_CONSTANT_IN_EV_K % value real ( dp ), parameter :: h_eV = PLANCK_CONSTANT_IN_EV_HZ % value real ( dp ), parameter :: c = SPEED_OF_LIGHT_IN_VACUUM % value real ( c_double ), bind ( C , name = \"ecx_core_PI\" ) :: & capi_PI = PI real ( c_double ), bind ( C , name = \"ecx_core_T_K\" ) :: & capi_T_K = T_K public :: PI , T_K public :: capi_PI , capi_T_K public :: roundn , assertEqual , kTe , nm2eV , deg2rad , rad2deg contains pure elemental function roundn ( x , n ) result ( r ) !! Round x to n digits. implicit none real ( real64 ), intent ( in ) :: x !! Number to be rounded. integer ( int32 ), intent ( in ) :: n !! Number of digits.s real ( real64 ) :: r !! Rounded number real ( real64 ) :: fac fac = 10 ** n r = nint ( x * fac , kind = kind ( x )) / fac end function function assertEqual ( x1 , x2 , n ) result ( r ) !! Assert if two numbers are equal. implicit none real ( real64 ), intent ( in ) :: x1 !! First number to be compared. real ( real64 ), intent ( in ) :: x2 !! Second number to be compared. integer ( int32 ), intent ( in ) :: n !! Number of digits. logical :: r !! Comparison result. real ( real64 ) :: fac real ( real64 ) :: ix1 real ( real64 ) :: ix2 if ( ieee_is_nan ( x1 ) . or . ieee_is_nan ( x2 )) then r = . false . else fac = 10 ** n ix1 = nint ( x1 * fac , kind = kind ( n )) ix2 = nint ( x2 * fac , kind = kind ( n )) r = ix1 == ix2 endif end function pure subroutine ecx_core_linspace ( start , end , x ) !! Linear spaced 1d-array. real ( real64 ), intent ( in ) :: start !! Starting value. real ( real64 ), intent ( in ) :: end !! Ending value (included). integer ( int32 ), intent ( out ) :: x (:) !! 1d-array where to put the linear spaced values. real ( real64 ) :: dx integer ( int32 ) :: n , i n = size ( x ) dx = ( end - start ) / ( n - 1 ) do i = 1 , n x ( i ) = start + dx * ( i - 1 ) end do x = linspace ( start , end , size ( x )) end subroutine pure subroutine ecx_core_logspace ( start , end , x ) !! Log spaced 1d-array. real ( real64 ), intent ( in ) :: start !! Starting value. real ( real64 ), intent ( in ) :: end !! Ending value (included). integer ( int32 ), intent ( out ) :: x (:) !! 1d-array where to put the log spaced values. x (:) = logspace ( start , end , size ( x )) end subroutine pure elemental function nm2eV ( lambda ) result ( E ) !! Convert wavelength to energy implicit none real ( real64 ), intent ( in ) :: lambda !! Wavelength in nm. real ( real64 ) :: E !! Energy in eV. E = h_eV * c / ( lambda * 1.0d-9 ) end function pure subroutine capi_nm2eV ( lambda , E , n ) bind ( C , name = \"ecx_core_nm2eV\" ) !! Convert wavelength to energy implicit none integer ( c_size_t ), intent ( in ), value :: n !! Size of lambda and E. real ( c_double ), intent ( in ) :: lambda ( n ) !! Wavelength in nm. real ( c_double ), intent ( out ) :: E ( n ) !! Energy in eV. E = nm2eV ( lambda ) end subroutine pure elemental function eV2nm ( E ) result ( lambda ) !! Convert wavelength to energy implicit none real ( real64 ), intent ( in ) :: E !! Energy in eV. real ( real64 ) :: lambda !! Wavelength in nm. lambda = h_eV * c / ( E * 1.0d-9 ) end function pure elemental function deg2rad ( theta ) result ( phase ) !! Converts degrees to rad. implicit none real ( real64 ), intent ( in ) :: theta !! Angle in degrees. real ( real64 ) :: phase !! Angle in rad. phase = theta * PI / 18 0.0d0 end pure elemental function rad2deg ( phase ) result ( theta ) !! Converts degrees to rad. implicit none real ( real64 ), intent ( in ) :: phase !! Angle in rad. real ( real64 ) :: theta !! Angle in degrees. theta = phase * 18 0.0d0 / PI end pure elemental function kTe ( T ) result ( r ) !! Compute the thermal voltage. implicit none real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: r !! Thermal voltage in V. r = ( T + T_K ) * kB_eV end function pure subroutine capi_kTe ( T , kTe_ , n ) bind ( C , name = \"ecx_core_kTe\" ) !! Compute the thermal voltage. integer ( c_size_t ), intent ( in ), value :: n !! Size of T and kTe. real ( c_double ), intent ( in ) :: T ( n ) !! Temperature in °C. real ( c_double ), intent ( out ) :: kTe_ ( n ) !! Thermal voltage in V. kTe_ = kTe ( T ) end subroutine end module","tags":"","loc":"sourcefile/ecx_core.f90.html"},{"title":"ecx_eis.f90 – ecx","text":"This file depends on sourcefile~~ecx_eis.f90~~EfferentGraph sourcefile~ecx_eis.f90 ecx_eis.f90 sourcefile~ecx_core.f90 ecx_core.f90 sourcefile~ecx_eis.f90->sourcefile~ecx_core.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~ecx_eis.f90~~AfferentGraph sourcefile~ecx_eis.f90 ecx_eis.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~ecx_eis.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module ecx__eis !! EIS module use iso_fortran_env use iso_c_binding , only : c_double , c_int , c_double_complex , c_size_t , c_char , c_loc , c_ptr , c_null_char use ieee_arithmetic , only : ieee_quiet_nan , ieee_value use ecx__core implicit none private character ( len = :), allocatable , target :: errmsg_f character ( len = :), allocatable , target :: errmsg_c public :: z , capi_z contains pure elemental function zr ( w , R ) result ( Z ) !! Compute the complex impedance for a resistor. implicit none real ( real64 ), intent ( in ) :: R !! Resistance in Ohms. real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. Z = cmplx ( R , 0.0d0 , kind = real64 ) end function pure elemental function zc ( w , C ) result ( Z ) !! Compute the complex impedance for a capacitor. implicit none real ( real64 ), intent ( in ) :: C !! Capacitance in Farad. real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. Z = cmplx ( 0.0d0 , - 1.0d0 / ( C * w ), kind = real64 ) end function pure elemental function zl ( w , L ) result ( Z ) !! Compute the complex impedance for an inductor. implicit none real ( real64 ), intent ( in ) :: L !! Inductance in Henry. real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. Z = cmplx ( 0.0d0 , L * w , kind = real64 ) end function pure elemental function zq ( w , Q , a ) result ( Z ) !! Compute the complex impedance for a CPE. implicit none real ( real64 ), intent ( in ) :: Q !! Resistance in S.s&#94;-a real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. real ( real64 ), intent ( in ) :: a !! CPE exponent complex ( real64 ) :: Z !! Complex impedance in Ohms. real ( real64 ) :: mod mod = 1 / ( Q * w ** a ) Z = cmplx ( mod * cos ( a * PI / 2 ), - mod * sin ( a * PI / 2 ), kind = real64 ) end function pure elemental function zw ( w , s ) result ( Z ) !! Compute the complex impedance for a semi-infinite Warburg. implicit none real ( real64 ), intent ( in ) :: w !! Angular frequencies in rad.s&#94;-1. real ( real64 ), intent ( in ) :: s !! Pseudo-Resistance in Ohms.s&#94;(1/2). complex ( real64 ) :: Z !! Complex impedance in Ohms. real ( real64 ) :: s2 s2 = s / sqrt ( w ) Z = cmplx ( s2 , - s2 , kind = real64 ) end function pure elemental function zo ( w , R , tau , n ) result ( Z ) !! @brief Compute the complex impedance for a finite length warburg implicit none real ( real64 ), intent ( in ) :: w !! Angular frequency in rad.s&#94;-1. real ( real64 ), intent ( in ) :: R !! Resistance in Ohms. real ( real64 ), intent ( in ) :: tau !! Characteristic time in s. real ( real64 ), intent ( in ) :: n !! Order of the fsw. complex ( real64 ) :: Z !! Complex impedance in Ohms. complex ( real64 ) :: x x = sqrt ( cmplx ( 0.0d0 , tau * w , kind = real64 )) x = x ** n Z = R / x * tanh ( x ) end function pure elemental function zt ( w , R , tau , n ) result ( Z ) !! Compute the complex impedance for a finite space warburg implicit none real ( real64 ), intent ( in ) :: w !! Angular frequency in rad.s&#94;-1. real ( real64 ), intent ( in ) :: R !! Resistance in Ohms. real ( real64 ), intent ( in ) :: tau !! Characteristic time in s. real ( real64 ), intent ( in ) :: n !! Order of the fsw. complex ( real64 ) :: Z !! Complex impedance in Ohms. complex ( real64 ) :: x x = cmplx ( 0.0d0 , tau * w , kind = real64 ) x = x ** n Z = R / ( x * tanh ( x )) end function pure elemental function zg ( w , G , K ) result ( Z ) !! Compute the complex impedance of the Gerisher element. implicit none real ( real64 ), intent ( in ) :: w !! Angular frequency in rad.s&#94;-1. real ( real64 ), intent ( in ) :: G !! Pseudo-Resistance in Ohms.s&#94;(1/2). real ( real64 ), intent ( in ) :: K !! Offset in rad.s&#94;-1. complex ( real64 ) :: Z !! Complex impedance in Ohms. complex ( real64 ) :: x x = cmplx ( 0.0d0 , w , kind = real64 ) Z = G / sqrt ( K + x ) end function !> @brief Compute the complex impedance for the given element. !! @param[in] p Parameters. !! @param[in] w Angular frequencies in rad.s-1 !! @param[in] zout Complex impedance in Ohms. !! @param[in] e Electrochemical element: R, C, L, Q, O, T, G !! @param[in] k Size of p !! @param[in] n Size of w !! @param[in] errstat Error status !! @param[in] errmsg Error message subroutine z ( p , w , zout , e , errstat , errmsg ) implicit none real ( real64 ), intent ( in ) :: p (:) real ( real64 ), intent ( in ) :: w (:) character ( len = 1 ), intent ( in ) :: e complex ( real64 ), intent ( out ) :: zout (:) integer ( int32 ), intent ( out ) :: errstat character ( len = :), intent ( out ), pointer :: errmsg if ( allocated ( errmsg_f )) then deallocate ( errmsg_f ) endif errstat = 0 if ( size ( p ) < 3 ) then errmsg_f = \"The size of p must be 3.\" errstat = 1 zout = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), & ieee_value ( 0.0d0 , ieee_quiet_nan ), & real64 ) else select case ( e ) case ( \"R\" ) zout = zr ( w , p ( 1 )) errmsg_f = \"No error\" case ( \"C\" ) zout = zc ( w , p ( 1 )) errmsg_f = \"No error\" case ( \"L\" ) zout = zl ( w , p ( 1 )) errmsg_f = \"No error\" case ( \"W\" ) zout = zw ( w , p ( 1 )) errmsg_f = \"No error\" case ( \"Q\" ) zout = zq ( w , p ( 1 ), p ( 2 )) errmsg_f = \"No error\" case ( \"O\" ) zout = zo ( w , p ( 1 ), p ( 2 ), p ( 3 )) errmsg_f = \"No error\" case ( \"T\" ) zout = zt ( w , p ( 1 ), p ( 2 ), p ( 3 )) errmsg_f = \"No error\" case ( \"G\" ) zout = zg ( w , p ( 1 ), p ( 2 )) errmsg_f = \"No error\" case DEFAULT errstat = 2 errmsg_f = \"Unknown element: \" // e zout = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), & ieee_value ( 0.0d0 , ieee_quiet_nan ), & real64 ) end select endif errmsg => errmsg_f end subroutine !> @brief C API - Compute the complex impedance for the given element. !! @param[in] p Parameters. !! @param[in] w Angular frequencies in rad.s-1 !! @param[in] zout Complex impedance in Ohms. !! @param[in] e Electrochemical element: R, C, L, Q, O, T, G !! @param[in] k Size of p !! @param[in] n Size of w !! @param[in] errstat Error status !! @param[in] errmsg Error message subroutine capi_z ( p , w , zout , e , k , n , errstat , errmsg ) bind ( C , name = \"ecx_eis_z\" ) implicit none integer ( c_size_t ), intent ( in ), value :: n integer ( c_size_t ), intent ( in ), value :: k character ( len = 1 , kind = c_char ), intent ( in ), value :: e real ( c_double ), intent ( in ) :: p ( k ) real ( c_double ), intent ( in ) :: w ( n ) complex ( c_double_complex ), intent ( out ) :: zout ( n ) integer ( c_int ), intent ( out ) :: errstat type ( c_ptr ), intent ( out ) :: errmsg character ( len = :), pointer :: fptr call z ( p , w , zout , e , errstat , fptr ) if ( allocated ( errmsg_c )) then deallocate ( errmsg_c ) endif allocate ( character ( len = len ( fptr ) + 1 ) :: errmsg_c ) errmsg_c = fptr // c_null_char errmsg = c_loc ( errmsg_c ) end subroutine subroutine mm ( p , w , zout , n ) !! Compute the measurement model. real ( real64 ), intent ( in ) :: p (:) !! Parameters. real ( real64 ), intent ( in ) :: w (:) !! Angular frequencies in rad.s-1 complex ( real64 ), intent ( out ) :: zout (:) !! Complex impedance in Ohms. integer ( int32 ), intent ( in ) :: n !! Number of voigt elements. integer ( int32 ) :: i integer ( int32 ) :: errstat character ( len = :), pointer :: errmsg complex ( real64 ) :: zr ( size ( zout )) complex ( real64 ) :: zc ( size ( zout )) if ( n < 1 ) then errstat = 3 zout = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), ieee_value ( 0.0d0 , ieee_quiet_nan ), real64 ) else if ( size ( p ) == ( 1 + n * 2 )) then call z ( p , w , zout , \"R\" , errstat , errmsg ) do i = 1 , n - 2 call z ( p ( i + 1 :), w , zr , \"R\" , errstat , errmsg ) call z ( p ( i + 2 :), w , zc , \"C\" , errstat , errmsg ) zout = zout + ( zr * zc ) / ( zr + zc ) enddo else errstat = 4 zout = cmplx ( ieee_value ( 0.0d0 , ieee_quiet_nan ), ieee_value ( 0.0d0 , ieee_quiet_nan ), real64 ) endif endif end subroutine end module","tags":"","loc":"sourcefile/ecx_eis.f90.html"},{"title":"ecx_kinetics_capi.f90 – ecx","text":"This file depends on sourcefile~~ecx_kinetics_capi.f90~~EfferentGraph sourcefile~ecx_kinetics_capi.f90 ecx_kinetics_capi.f90 sourcefile~ecx_kinetics.f90 ecx_kinetics.f90 sourcefile~ecx_kinetics_capi.f90->sourcefile~ecx_kinetics.f90 sourcefile~ecx_core.f90 ecx_core.f90 sourcefile~ecx_kinetics.f90->sourcefile~ecx_core.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module ecx__kinetics_capi use iso_fortran_env use iso_c_binding use ecx__kinetics implicit none private contains pure function ecx_kinetics_capi_nernst ( E0 , z , aox , vox , nox , ared , vred , nred , T ) result ( E ) bind ( C ) !! Compute the Nernst electrochemical potential in V. implicit none real ( c_double ), intent ( in ), value :: E0 !! Standard electrochemical potential in V. integer ( c_int ), intent ( in ), value :: z !! Number of exchanged electrons. integer ( c_size_t ), intent ( in ), value :: nox !! Number of oxidants. integer ( c_size_t ), intent ( in ), value :: nred !! Number of reductants. real ( c_double ), intent ( in ) :: aox ( nox ) !! Activities of the oxidants. real ( c_double ), intent ( in ) :: vox ( nox ) !! Coefficients for the oxidants. real ( c_double ), intent ( in ) :: ared ( nred ) !! Activities of the reductants real ( c_double ), intent ( in ) :: vred ( nred ) !! Coefficients for the reductants. real ( c_double ), intent ( in ), value :: T !! Temperature in °C. real ( c_double ) :: E E = ecx_kinetics_nernst ( E0 , z , aox , vox , ared , vred , T ) end function pure subroutine ecx_kinetics_capi_sbv ( U , OCV , j0 , aa , ac , za , zc , A , T , I , n ) bind ( c ) !! Compute Butler Volmer equation without mass transport. ! arguments integer ( c_size_t ), intent ( in ), value :: n !! Size of U and I. real ( c_double ), intent ( in ), value :: OCV !! Open circuit potential in volts. real ( c_double ), intent ( in ) :: U ( n ) !! Potential in volts. real ( c_double ), intent ( in ), value :: j0 !! Exchange current density in A.cm-2. real ( c_double ), intent ( in ), value :: aa !! Anodic transfert coefficient. real ( c_double ), intent ( in ), value :: ac !! Cathodic transfert coefficient. real ( c_double ), intent ( in ), value :: za !! Number of exchanged electrons in anodic branch. real ( c_double ), intent ( in ), value :: zc !! Number of exchanged electrons in cathodic branch. real ( c_double ), intent ( in ), value :: A !! Area in cm2. real ( c_double ), intent ( in ), value :: T !! Temperature in °C. real ( c_double ), intent ( out ) :: I ( n ) !! Current in A. I = ecx_kinetics_sbv ( U , OCV , j0 , aa , ac , za , zc , A , T ) end subroutine pure subroutine ecx_kinetics_capi_bv ( U , OCV , j0 , jdla , jdlc , aa , ac , za , zc , A , T , I , n ) bind ( c ) !! Compute Butler Volmer equation without mass transport. ! arguments integer ( c_size_t ), intent ( in ), value :: n !! Size of U and I. real ( c_double ), intent ( in ), value :: OCV !! Open circuit potential in volts. real ( c_double ), intent ( in ) :: U ( n ) !! Potential in volts. real ( c_double ), intent ( in ), value :: j0 !! Exchange current density in A.cm-2 real ( real64 ), intent ( in ), value :: jdla !! Anodic diffusion limiting current density in A.cm-2. real ( real64 ), intent ( in ), value :: jdlc !! Cathodic diffusion limiting current density in A.cm-2. real ( c_double ), intent ( in ), value :: aa !! Anodic transfert coefficient. real ( c_double ), intent ( in ), value :: ac !! Cathodic transfert coefficient. real ( c_double ), intent ( in ), value :: za !! Number of exchanged electrons in anodic branch. real ( c_double ), intent ( in ), value :: zc !! Number of exchanged electrons in cathodic branch. real ( c_double ), intent ( in ), value :: A !! Area in cm2. real ( c_double ), intent ( in ), value :: T !! Temperature in °C. real ( c_double ), intent ( out ) :: I ( n ) !! Current in A. I = ecx_kinetics_bv ( U , OCV , j0 , jdla , jdlc , aa , ac , za , zc , A , T ) end subroutine end module","tags":"","loc":"sourcefile/ecx_kinetics_capi.f90.html"},{"title":"ecx_version.f90 – ecx","text":"Files dependent on this one sourcefile~~ecx_version.f90~~AfferentGraph sourcefile~ecx_version.f90 ecx_version.f90 sourcefile~capi_version.f90 capi_version.f90 sourcefile~capi_version.f90->sourcefile~ecx_version.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~ecx_version.f90 sourcefile~capi.f90 capi.f90 sourcefile~ecx.f90->sourcefile~capi.f90 sourcefile~capi.f90->sourcefile~capi_version.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module ecx__version !! Version implicit none private character ( len =* ), parameter :: version = \"0.1.0\" character ( len = :), allocatable , target :: version_f public :: get_version contains function get_version () result ( fptr ) !! Get the version. implicit none !! Returns character ( len = :), pointer :: fptr !! Pointer to the version string. if ( allocated ( version_f )) then deallocate ( version_f ) endif allocate ( character ( len = len ( version )) :: version_f ) version_f = version fptr => version_f end function end module ecx__version","tags":"","loc":"sourcefile/ecx_version.f90.html"},{"title":"ecx_pec.f90 – ecx","text":"This file depends on sourcefile~~ecx_pec.f90~~EfferentGraph sourcefile~ecx_pec.f90 ecx_pec.f90 sourcefile~ecx_core.f90 ecx_core.f90 sourcefile~ecx_pec.f90->sourcefile~ecx_core.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~ecx_pec.f90~~AfferentGraph sourcefile~ecx_pec.f90 ecx_pec.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~ecx_pec.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !> @file !! @brief PEC Module. !> @brief PEC Module. module ecx__pec use iso_fortran_env use ecx__core implicit none private public :: alpha , iph contains !> @brief Compute the not scaled absorbance coefficient. !! @param[in] hv Light energy in eV. !! @param[in] Eg Bandgap in eV. !! @param[in] n Exponent for direct (1/2) or indirect transition (2) !! @return Absorbance coefficient in eV. pure elemental function alpha ( hv , Eg , n ) result ( res ) implicit none real ( real64 ), intent ( in ) :: hv real ( real64 ), intent ( in ) :: Eg real ( real64 ), intent ( in ) :: n real ( real64 ) :: res real ( real64 ) :: d d = hv - Eg if ( d > 0.0d0 ) then res = ( hv - Eg ) ** n / hv else res = 0.0d0 endif end function !> @brief Compute the complex photocurrent !! @param[in] hv Light energy in eV. !! @param[in] K Scaling factor for absorbance in . !! @param[in] Eg Bandgap in eV. !! @param[in] theta Phase in degrees. !! @param[in] n Transition type: n=1/2 for direct transition and n=2 for indirect transition !! @return iph Complex photocurrent. pure elemental function iph ( hv , K , Eg , theta , n ) result ( res ) implicit none real ( real64 ), intent ( in ) :: hv real ( real64 ), intent ( in ) :: K real ( real64 ), intent ( in ) :: Eg real ( real64 ), intent ( in ) :: theta real ( real64 ), intent ( in ) :: n complex ( real64 ) :: res real ( real64 ) :: re , im , mod , phase phase = deg2rad ( theta ) mod = K ** n * alpha ( hv , Eg , n ) re = mod * cos ( phase ) im = mod * sin ( phase ) res = cmplx ( re , im , kind = real64 ) end function end module","tags":"","loc":"sourcefile/ecx_pec.f90.html"},{"title":"capi.f90 – ecx","text":"This file depends on sourcefile~~capi.f90~~EfferentGraph sourcefile~capi.f90 capi.f90 sourcefile~capi_version.f90 capi_version.f90 sourcefile~capi.f90->sourcefile~capi_version.f90 sourcefile~ecx_version.f90 ecx_version.f90 sourcefile~capi_version.f90->sourcefile~ecx_version.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~capi.f90~~AfferentGraph sourcefile~capi.f90 capi.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~capi.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module capi !! Main module for ECX library: C API. use capi__version end module","tags":"","loc":"sourcefile/capi.f90.html"},{"title":"capi_version.f90 – ecx","text":"This file depends on sourcefile~~capi_version.f90~~EfferentGraph sourcefile~capi_version.f90 capi_version.f90 sourcefile~ecx_version.f90 ecx_version.f90 sourcefile~capi_version.f90->sourcefile~ecx_version.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~capi_version.f90~~AfferentGraph sourcefile~capi_version.f90 capi_version.f90 sourcefile~capi.f90 capi.f90 sourcefile~capi.f90->sourcefile~capi_version.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~capi.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module capi__version !! version use iso_c_binding , only : c_loc , c_ptr , c_null_char use ecx__version , only : get_version implicit none private character ( len = :), allocatable , target :: version_c public :: capi_get_version contains function capi_get_version () bind ( c , name = \"ecx_get_version\" ) result ( cptr ) !! Get the version. implicit none ! Returns type ( c_ptr ) :: cptr !! Pointer to version string. character ( len = :), pointer :: fptr fptr => get_version () if ( allocated ( version_c )) then deallocate ( version_c ) endif allocate ( character ( len = len ( fptr ) + 1 ) :: version_c ) version_c = fptr // c_null_char cptr = c_loc ( fptr ) end function end module capi__version","tags":"","loc":"sourcefile/capi_version.f90.html"},{"title":"ecx.f90 – ecx","text":"This file depends on sourcefile~~ecx.f90~~EfferentGraph sourcefile~ecx.f90 ecx.f90 sourcefile~capi.f90 capi.f90 sourcefile~ecx.f90->sourcefile~capi.f90 sourcefile~ecx_core.f90 ecx_core.f90 sourcefile~ecx.f90->sourcefile~ecx_core.f90 sourcefile~ecx_eis.f90 ecx_eis.f90 sourcefile~ecx.f90->sourcefile~ecx_eis.f90 sourcefile~ecx_kinetics.f90 ecx_kinetics.f90 sourcefile~ecx.f90->sourcefile~ecx_kinetics.f90 sourcefile~ecx_pec.f90 ecx_pec.f90 sourcefile~ecx.f90->sourcefile~ecx_pec.f90 sourcefile~ecx_version.f90 ecx_version.f90 sourcefile~ecx.f90->sourcefile~ecx_version.f90 sourcefile~capi_version.f90 capi_version.f90 sourcefile~capi.f90->sourcefile~capi_version.f90 sourcefile~ecx_eis.f90->sourcefile~ecx_core.f90 sourcefile~ecx_kinetics.f90->sourcefile~ecx_core.f90 sourcefile~ecx_pec.f90->sourcefile~ecx_core.f90 sourcefile~capi_version.f90->sourcefile~ecx_version.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module ecx !! Main module for the ECX library. use ecx__core use ecx__kinetics use ecx__eis use ecx__pec use ecx__version use capi end module","tags":"","loc":"sourcefile/ecx.f90.html"},{"title":"ecx_kinetics.f90 – ecx","text":"This file depends on sourcefile~~ecx_kinetics.f90~~EfferentGraph sourcefile~ecx_kinetics.f90 ecx_kinetics.f90 sourcefile~ecx_core.f90 ecx_core.f90 sourcefile~ecx_kinetics.f90->sourcefile~ecx_core.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~ecx_kinetics.f90~~AfferentGraph sourcefile~ecx_kinetics.f90 ecx_kinetics.f90 sourcefile~ecx.f90 ecx.f90 sourcefile~ecx.f90->sourcefile~ecx_kinetics.f90 sourcefile~ecx_kinetics_capi.f90 ecx_kinetics_capi.f90 sourcefile~ecx_kinetics_capi.f90->sourcefile~ecx_kinetics.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module ecx__kinetics !! Module for computing kinetics using the Butler-Volmer equations. use iso_fortran_env use ecx__core implicit none private public :: ecx_kinetics_nernst public :: ecx_kinetics_sbv , ecx_kinetics_bv contains pure function ecx_kinetics_nernst ( E0 , z , aox , vox , ared , vred , T ) result ( E ) !! Compute the Nernst electrochemical potential in V. implicit none real ( real64 ), intent ( in ) :: E0 !! Standard electrochemical potential in V. integer ( int32 ), intent ( in ) :: z !! Number of exchanged electrons. real ( real64 ), intent ( in ) :: aox (:) !! Activities of the oxidants. real ( real64 ), intent ( in ) :: vox (:) !! Coefficients for the oxidants. real ( real64 ), intent ( in ) :: ared (:) !! Activities of the reductants real ( real64 ), intent ( in ) :: vred (:) !! Coefficients for the reductants. real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: E , ox , red , kTe_ kTe_ = kTe ( T ) ox = product ( aox ** vox ) red = product ( ared ** vred ) E = E0 + kTe_ / z * log ( ox / red ) end function pure elemental function ecx_kinetics_sbv ( U , OCV , j0 , aa , ac , za , zc , A , T ) result ( I ) !! Compute Butler Volmer equation without mass transport. real ( real64 ), intent ( in ) :: OCV !! Open Circuit Voltage in V. real ( real64 ), intent ( in ) :: U !! Electrochemical potential in V. real ( real64 ), intent ( in ) :: j0 !! Exchange current density in A.cm-2. real ( real64 ), intent ( in ) :: aa !! Anodic transfer coefficient. real ( real64 ), intent ( in ) :: ac !! Cathodic transfer coefficient. real ( real64 ), intent ( in ) :: za !! Number of exchnaged electrons in the anodic branch. real ( real64 ), intent ( in ) :: zc !! Number of exchnaged electrons in the cathodic branch. real ( real64 ), intent ( in ) :: A !! Area in cm2. real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: I real ( real64 ) :: kTe_ kTe_ = kTe ( T ) I = A * j0 * ( exp ( aa * za * ( U - OCV ) / kTe_ ) - exp ( - ac * zc * ( U - OCV ) / kTe_ )); end function pure elemental function ecx_kinetics_bv ( U , OCV , j0 , jdla , jdlc , aa , ac , za , zc , A , T ) result ( I ) !! Compute Butler Volmer equation with mass transport. implicit none real ( real64 ), intent ( in ) :: OCV !! Open Circuit Voltage in V. real ( real64 ), intent ( in ) :: U !! Electrochemical potential in V. real ( real64 ), intent ( in ) :: j0 !! Exchange current density in A.cm-2. real ( real64 ), intent ( in ) :: jdla !! Anodic diffusion limiting current density in A.cm-2. real ( real64 ), intent ( in ) :: jdlc !! Cathodic diffusion limiting current density in A.cm-2. real ( real64 ), intent ( in ) :: aa !! Anodic transfer coefficient. real ( real64 ), intent ( in ) :: ac !! Cathodic transfer coefficient. real ( real64 ), intent ( in ) :: za !! Number of exchnaged electrons in the anodic branch. real ( real64 ), intent ( in ) :: zc !! Number of exchnaged electrons in the cathodic branch. real ( real64 ), intent ( in ) :: A !! Area in cm2. real ( real64 ), intent ( in ) :: T !! Temperature in °C. real ( real64 ) :: I , kTe_ , num , denom kTe_ = kTe ( T ) num = ecx_kinetics_sbv ( U , OCV , j0 , aa , ac , za , zc , 1.0d0 , T ) denom = 1 + j0 / jdla * exp ( aa * za * ( U - OCV ) / kTe_ ) + j0 / jdlc * exp ( - ac * zc * ( U - OCV ) / kTe_ ); I = A * num / denom ; end function end module","tags":"","loc":"sourcefile/ecx_kinetics.f90.html"},{"title":"Contributing and specs – ecx","text":"Electrochemistry for Modern Fortran.","tags":"","loc":"page/index.html"},{"title":"Changelog – ecx","text":"Version 0.1.0 Version 0.1.0 Implementation of eis + C API Python wrappers for eis. Full changelog available at github Note released yet","tags":"","loc":"page/changelog.html"},{"title":"Examples – ecx","text":"Fortran C Python Fortran program example_in_f use iso_fortran_env use ecx implicit none real ( real64 ) :: w ( 3 ) = [ 1.0d0 , 1.0d0 , 10 0.0d0 ] real ( real64 ) :: r = 10 0.0d0 real ( real64 ) :: p ( 3 ) = 0.0d0 character ( len = 1 ) :: e integer :: errstat complex ( real64 ) :: zout ( 3 ) character ( len = :), pointer :: errmsg p ( 1 ) = r e = \"R\" call z ( p , w , zout , e , errstat , errmsg ) print * , zout print * , errstat , errmsg end program C #include <stdio.h> #include <stdlib.h> #include \"ecx.h\" int main ( void ){ int errstat , i ; double w [ 3 ] = { 1.0 , 1.0 , 1.0 }; double p [ 3 ] = { 100.00 , 0.0 , 0.0 }; ecx_cdouble z [ 3 ] = { ecx_cbuild ( 0.0 , 0.0 ), ecx_cbuild ( 0.0 , 0.0 ), ecx_cbuild ( 0.0 , 0.0 )}; char * errmsg ; ecx_eis_z ( p , w , z , 'R' , 3 , 3 , & errstat , & errmsg ); for ( i = 0 ; i < 3 ; i ++ ){ printf ( \"%f %f \\n \" , creal ( z [ i ]), cimag ( z [ i ])); } printf ( \"%d %s \\n \" , errstat , errmsg ); return EXIT_SUCCESS ; } Python import numpy as np from pyecx import eis import matplotlib.pyplot as plt R = 100 C = 1e-6 w = np . logspace ( 6 , - 3 , 100 ) zr = np . asarray ( eis . zr ( w , R )) zc = np . asarray ( eis . zc ( w , C )) zrc = zr * zc / ( zr + zc ) print ( \"finish\" ) fig = plt . figure () ax = fig . add_subplot ( 111 ) ax . set_aspect ( \"equal\" ) ax . plot ( zrc . real , zrc . imag , \"g.\" , label = \"R/C\" ) ax . invert_yaxis () plt . show ()","tags":"","loc":"page/examples.html"},{"title":"License – ecx","text":"Copyright (c) Milan Skocic Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n“Software”), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions: The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tags":"","loc":"page/license.html"},{"title":"References – ecx","text":"B. A. Boukamp, “A Nonlinear Least Squares Fit Procedure for Analysis of Immittance Data of Electrochemical Systems,” Solid State Ionics, pp. 31–44, 1986. F. Di Quarto, M. C. Romano, M. Santamaria, S. Piazza, and C. Sunseri, “A Semiempirical Correlation between the Optical Band Gap of Hydroxides and the Electronegativity of Their Constituents,” Russian Journal of Electrochemistry, vol. 36, no. 11, pp. 1203–1208, 2000. S. Piazza, C. Sunseri, and F. D. Quarto, “A Simple Model for the Photoelectrochemical Behavior of Corrosion Layers with Variable Hydration Degree,” CORROSION, vol. 58, no. 5, pp. 436–447, May 2002, doi: 10.5006/1.3277634. K. Protassov, Analyse Statistique de Données Expérimentales. Paris: EDP Sciences, 2002. P. Marcus and F. Mansfield, Analytical Methods in Corrosion Science and Engineering. Boca Raton, FL: CRC Press, 2006. J.-F. Marucco, Chimie Des Solides. Paris: EDP Sciences, 2006. J.-P. Diard, B. Le Gorrec, and C. Montella, Cinétique Électrochimique. Paris: Hermann, 1996. R. Benaboud, P. Bouvier, J.-P. Petit, Y. Wouters, and A. Galerie, “Comparative Study and Imaging by PhotoElectroChemical Techniques of Oxide Films Thermally Grown on Zirconium and Zircaloy-4,” Journal of Nuclear Materials, vol. 360, no. 2, pp. 151–158, 2007. A. K. Vijh, “Correlation between Bond Energies and Forbidden Gaps of Inorganic Binary Compounds,” Journal of Physics and Chemistry of Solids, vol. 30, pp. 1999–2005, 1969. A. H. Harvey and E. W. Lemmon, “Correlation for the Vapor Pressure of Heavy Water From the Triple Point to the Critical Point,” Journal of Physical and Chemical Reference Data, vol. 31, no. 1, pp. 173–181, Mar. 2002, doi: 10.1063/1.1430231. D. R. Lide, CRC Handbook of Chemistry and Physics, 84th Edition. Boca Raton, FL: CRC Press, 2003. F. D. Quarto, A. Zaffora, F. D. Franco, and M. Santamaria, “Critical Review—Photocurrent Spectroscopy in Corrosion and Passivity Studies: A Critical Assessment of the Use of Band Gap Value to Estimate the Oxide Film Composition,” Journal of The Electrochemical Society, vol. 164, no. 12, pp. C671–C681, Jan. 2017, doi: 10.1149/2.1621712jes. P. R. Bevington and D. K. Robinson, Data Reduction and Error Analysis for Physical Sciences, Third. New York: McGraw Hill, 2003. W. W. Gärtner, “Depletion-Layer Photoeffects in Semiconductors,” Physical Review, vol. 116, no. 1, pp. 84–87, 1959. B. Hirschorn, M. E. Orazem, B. Tribollet, V. Vivier, I. Frateur, and M. Musiani, “Determination of Effective Capacitance and Film Thickness from Constant-Phase-Element Parameters,” Electrochimica Acta, vol. 55, no. 21, pp. 6218–6227, Aug. 2010, doi: 10.1016/j.electacta.2009.10.065. Z. Stoynov and D. Vladikova, Differential Impdedance Analysis. Sofia: Marin Drinov Academic Publishing House, 2005. H. Gerischer, “Electrochemical Behavior of Semiconductors under Illumination,” Journal of The Electrochemical Society, vol. 113, no. 11, pp. 1174–1182, 1966. M. E. Orazem and B. Tribollet, Electrochemical Impedance Spectroscopy. John Wiley & Sons, Inc., 2008. Allen J. and L. R. Faulkner, Electrochemical Methods: Fundamentals and Applications, Second. New York: John Wiley & Sons, Inc., 2001. N. Sato, Electrochemistry at Metal and Semiconductors Electrodes. Amsterdam: Elsevier Science, 1998. S. R. Morrison, Electrochemistry at Semiconductor and Oxidized Metal Electrodes. New York: Plenum Press, 1980. W. Plieth, Electrochemistry for Materials Science. Amsterdam: Elsevier, 2008. M. Skocic, “Etude (photo)-électrochimique en réacteur simulé du phénomène de shadow corrosion des alliages de zirconium,” PhD Thesis, Université de Grenoble Alpes, Grenoble, 2016. A. J. Bard and M. Stratmann, Fundamentals of Semiconductors Electrochemistry and Photoelectrochemistry. Wiley-VCH, 2002. IAPWS, “Guideline on the Henry’s Constant and Vapor-Liquid Distribution Constant for Gases in H\\textsubscript2O and D\\textsubscript2O at High Temperatures,” IAPWS, Kyoto, Japan, G7-04, 2004. E. Barsoukov and J. R. Macdonald, Impedance Spectroscopy: Theory, Experiment, and Applications, Second. Hoboken, NJ, USA: John Wiley & Sons, Inc., 2005. W. Wagner and A. Pruss, “International Equations for the Saturation Properties of Ordinary Water Substance. Revised According to the International Temperature Scale of 1990. Addendum to J. Phys. Chem. Ref. Data 16, 893 (1987),” Journal of Physical and Chemical Reference Data, vol. 22, no. 3, pp. 783–787, May 1993, doi: 10.1063/1.555926. O. Bockris, A. . K. N. Reddy, and M. Gamboa-Aldeco, “Ionics,” in Modern Electrochemistry, Second., vol. 1, New York, NY, USA: KLUWER ACADEMIC PUBLISHERS, 2002. E. Becquerel, “Mémoire Sur Les Effets Électriques Produits Sous l’influence Des Rayons Solaires,” Comptes Rendus des Séances Hebdomadaires, vol. 9, pp. 561–567, 1839. J. Nocedal and S. J. Wright, Numerical Optimization, Second. New York: Springer, 2006. W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery, Numerical Recipes: The Art of Scientific Computing, Third. Cambridge: Cambridge University Press, 2007. M. Bojinov, P. Kinnunen, T. Laitinen, K. Mäkelä, T. Saario, and P. Sirkiä, “Photocurrent Response of the Passive Film on Iron in a High-Temperature Aqueous Electrolyte,” Electrochemistry Communications, vol. 4, pp. 222–226, 2002. A. Srisrual, J.-P. Petit, Y. Wouters, C. Pascal, and A. Galerie, “Photoelectrochemical Investigations on Individual Ferritic and Austenitic Grains of a Duplex Stainless Steel Oxidized in Water Vapour.,” Materials at High Temperatures, vol. 28, no. 4, pp. 349–354, 2011. U. Stimming, “Photoelectrochemical Studies of Passive Films,” Electrochimica Acta, vol. 31, no. 4, pp. 415–429, 1986. J.-P. Petit, R. Boichot, A. Loucif, A. Srisrual, and Y. Wouters, “Photoelectrochemistry of Oxidation Layers: A Novel Approach to Analyze Photocurrent Energy Spectra,” Oxidation of Metals, vol. 1, pp. 1–11, 2013. H. O. Finklea, “Photoelectrochemistry: Introductory Concepts,” Journal of Chemical Education, vol. 60, no. 4, p. 325, 1983, doi: 10.1021/ed060p325. M. Butler, “Photoelectrolysis and Physical Properties of the Semiconducting Electrode WO\\textsubscript3,” Journal of Applied Physics, vol. 48, no. 5, p. 1914, 1977, doi: 10.1063/1.323948. M. A. Butler and D. S. Ginley, “Prediction of Flatband Potentials at Semiconductor-Electrolyte Interfaces from Atomic Electronegativities,” Journal of The Electrochemical Society, vol. 125, no. 2, pp. 228–231, 1978. S. Piazza, M. Santamaria, C. Sunseri, and F. D. Quarto, “Recent Advances in Photocurrent Spectroscopy of Passive Films,” Electrochimica Acta, vol. 48, no. 9, pp. 1105–1114, 2003. S. El Euch, “Recherche d’une Corrélation Entre Caractéristiques Électrochimiques et Relâchement En Nickel de l’alliage 690 En Milieu Primaire d’un Réacteur à Eau Pressurisée,” PhD Thesis, Université Sorbonne, Paris, 2019. IAPWS, “Revised Release on the IAPWS Industrial Formulation 1997 for the Thermodynamic Properties of Water and Steam,” IAPWS, Lucerne, Switzerland, R7-97, 2007. R. Memming, Semiconductor Electrochemistry. Weinheim: WILEY-VCH Verlag GmbH, 2008. H. Gerischer, “Semiconductor Electrodes and Their Interaction with Light,” in Photoelectrochemistry, Photocatalysis and Photoreactor, M. Schiavello, Ed., Dordrecht: D. Reidel Publishing Company, 1985, pp. 39–106. F. Di Quarto, C. Sunseri, S. Piazza, and C. Sunseri, “Semiempirical Correlation between Optical Band Gap Values of Oxides and the Difference of Electronegativity of the Elements. Its Importance for a Quantitative Use of Photocurrent Spectroscopy in Corrosion Studies,” Journal of Physical Chemistry, vol. 101, pp. 2519–2525, 1997. C. H. Hsu and F. Mansfeld, “Technical Note: Concerning the Conversion of the Constant Phase Element Parameter Y0 into a Capacitance,” Corrosion, vol. 57, no. 9, pp. 747–748, Sep. 2001, doi: 10.5006/1.3280607. D. Tromans, “Temperature and Pressure Dependent Solubility of Oxygen in Water: A Thermodynamic Analysis,” Hydrometallurgy, vol. 48, no. 3, pp. 327–342, 1998. G. J. Brug, A. L. G. van den Eeden, M. Sluyters-Rehbach, and J. H. Sluyters, “The Analysis of Electrode Impedances Complicated by the Presence of a Constant Phase Element,” Journal of Electroanalytical Chemistry and Interfacial Electrochemistry, vol. 176, no. 1, pp. 275–295, Sep. 1984, doi: 10.1016/S0022-0728(84)80324-1. A. W. Copeland, O. D. Black, and A. B. Garrett, “The Photovoltaic Effect,” Chemical Reviews, vol. 31, no. 1, pp. 177–226, 1942, doi: 10.1021/cr60098a004. NIST, “Thermophysical Properties of Fluid Systems.” 2017.","tags":"","loc":"page/references.html"},{"title":"Specifications (specs) – ecx","text":"This is an index/directory of the specifications (specs) for each module. C API - Prototypes for C language.","tags":"","loc":"page/specs/index.html"},{"title":"C API – ecx","text":"The prototypes of the C API are defined as shown below. #ifndef ECX_H #define ECX_H #include <complex.h> #if _MSC_VER #define ADD_IMPORT __declspec(dllimport) typedef _Dcomplex ecx_cdouble ; #define ecx_cbuild(real, imag) (_Cbuild(real, imag)) #else #define ADD_IMPORT typedef double _Complex ecx_cdouble ; #define ecx_cbuild(real, imag) (real+I*imag) #endif extern char * ecx_get_version ( void ); /* ---------------------------------------------------------------------------------------------- */ ADD_IMPORT extern const double ecx_core_PI ; ADD_IMPORT extern const double ecx_core_T_K ; void ecx_core_nm2eV ( double * lambda , double * E , size_t n ); void ecx_core_kTe ( double * U , double * kTE , size_t n ); /* ---------------------------------------------------------------------------------------------- */ /* ---------------------------------------------------------------------------------------------- */ extern double ecx_kinetics_capi_nernst ( double E0 , int z , double * aox , double * vox , size_t nox , double * ared , double * vred , size_t nred , double T ); extern void ecx_kinetics_capi_sbv ( double * U , double OCV , double j0 , double aa , double ac , double za , double zc , double A , double T , double * i , size_t n ); extern void ecx_kinetics_capi_bv ( double * U , double OCV , double j0 , double jdla , double jdlc , double aa , double ac , double za , double zc , double A , double T , double * i , size_t n ); /* ---------------------------------------------------------------------------------------------- */ /* ---------------------------------------------------------------------------------------------- */ extern void ecx_capi_zr ( double * w , double R , size_t n , ecx_cdouble * Z ); extern void ecx_capi_zc ( double * w , double C , size_t n , ecx_cdouble * Z ); extern void ecx_capi_zl ( double * w , double L , size_t n , ecx_cdouble * Z ); extern void ecx_capi_zcpe ( double * w , double Q , double a , size_t n , ecx_cdouble * Z ); extern void ecx_capi_zw ( double * w , double s , size_t n , ecx_cdouble * Z ); extern void ecx_eis_z ( double * p , double * w , ecx_cdouble * z , char e , size_t k , size_t n , int * errstat , char * ( * errmsg )); /* ---------------------------------------------------------------------------------------------- */ #endif","tags":"","loc":"page/specs/capi.html"},{"title":"PhotoElectroChemistry (PEC) – ecx","text":"Introduction PEC takes advantage of the photovoltaic effect, discovered by Becquerel in 1839,\nthat occurs at the interface of a semiconductor and an electrolyte. In fact, the first experience showed\nthe occurence of a photopotential and a photocurrent under illumination when a silver electrode, covered with an\noxide layer, was immersed in an acidic medium and connected to a platinum electrode.\nNonetheless, the first studies focused on the understanding of the interfacial processes were performed\nmuch later ( Stimming, Gerischer, Copeland ). The basics of photoelectrochemistry and application examples are presented here and they are largely \ndescribed in the literature ( Morrison, Gerischer, Memming, Marcus, Bard, Sato ).\nSeveral hypotheses are needed in order to apply the theoretical concepts: semiconductors are considered to be ideal i.e. crystalized and homogeneous the dielectric constant of the semiconductor is independent of the light wavelength the capacity of the Helmholtz layer is greater than the capacity of the space charge capacitance the potential drop in the Helmholtz layer is independent of the applied potential and is negligible The hypotheses are rarely fully respected in the case of oxides or passive films formed on common alloys.\nNonetheless, the literature shows that the developed models can be applied to non-ideal systems\nsuch as oxides or passive layers. Solids are generally classified into three groups: condcutors , semiconductors and insulators .\nEach category can be illustrated with a specific band structure as shown in the figure below ( Marucco ).\nValence and conduction bands correspond to the allowed energy states for the electrons.\nThe lowest energy level of the conduction band is labeled and the highest energy level \nof the valence is labeled . They are separated by a band gap, , with no allowed\nenergy states.\nThe repartition of the electrons among both bands are described by the position of the Fermi level, ,\nwhich represents the highest energy state that can be occupied at 0K. The electronic conduction is due to the movement either of the negatively charge electrons\nin the conduction band or the positively charged holes in the valence band or both simultaneously.\nConsequently, the conduction depends on the number of available charge carriers in the conduction and valence bands.\nIn conductors, an overlap of the conduction and the valence bands occurs which means that the highest\nallowed energy band is partilly filled.\nThe distinction between a semiconductor and an isolator is less obvious because the conduction depends on the band\ngap and the energy provided by the environment to the electron from the valence band in order to jump into\nthe conduction band. In semiconductors, charge carriers can be generated by three mechanisms: thermal , excitation , photoexcitation , doping , as shown here. In the case of very low band gaps, thermal excitation can be enough to eject an electron \nfrom the valence band into the conduction band. \nPhotoexcitation ejects electrons from the valence band into the conduction band when an \nincident photon, with an energy greater than the band gap, is absorbed. \nDoping introduces additional energy levels located in between the conduction and valence bands. Doping occurs when the stoichiometry is altered or when impurities are introduced in the \ncrystallographic lattice of the semiconductor. In the case of n-type semiconductors, the donor\nenergy levels lie just under the conduction band. The electrons from the donor levels\nare ejected by thermal excitation. Consequently, the majority charge carriers are negatively charged\nelectrons in the conduction band. Similarly, the acceptor energy levels , of p-type\nsemiconductors, lie just above the valence band. The latter trap electrons from the valence band \nand therefore create holes. Consequently, the majority charge carriers are positively charged holes. The Fermi level in intrinsic semiconductors is located at the mid-gap.\nThe n-type and p-type doping shift the Fermi level towards band edges and , \nrespectively. \nThe next figure shows the position of the Fermi level with respect to\nthe semiconductor types. Semiconductor/electroyte interface in dark A potential gradient occurs when a semiconductor comes into contact with an\nelectrolyte as shown below. The position of the Fermi level in the electrolyte with respect to the conduction\nand valence band edges leads to three different situations after a transient charge transfer.\nThe flat band occurs when the Fermi level in the electrolyte matches the Fermi level in the\nsemiconductor. Consequently, there is no potential gradient in the semiconductor.\nIn a case of Fermi level mismatch, a band bending occurs in the semiconductor near the\nsemiconductor/electrolyte interface. The band bending leads to either depletion or accumulation\nof majority charge carriers near the semiconductor/electrolyte interface.\nThe spatial extension of the depletion/accumulation zone is called space charge as shown below. Depletion and accumulation as well as band bending can be obtained by polarizing the semiconductor.\nAs long as the hypothesis described in the introduction paragraph stand, the polarization\ndoes not modify the surface band edges and . Consequently, the\npolarization will only alter the band bending in the space charge. Depending on the applied potential, , with respect to the flat band, , three different situations will occur: : flat band situation no matter the semiconductor type : depletion (accumulation) in a case of n-type (p-type) semiconductor : accumulation (depletion) in a case of p-type (n-type) semiconductor Without illumination, cathodic (anodic) currents are favored in a case of accumulation\nof electrons (holes) for an n-type (p-type) semiconductor. In fact, the majority charge carriers\nof n-type (p-type) semiconductors are electrons (holes). Reciprocally, anodic (cathodic) currents \nare not favored in a case of depends of electrons (holes) for an n-type (p-type) semiconductor.\nThe junction between a semiconductor and an electrolyte acts like a Schottky diode. Semiconductor/electroyte interface under illumination The illumination of the semiconductor/electrolyte interface, with photons having an energy\ngreater than the band gap, :math: E_g , creates electron/hole pairs in the semiconductor.\nBy applying the adequate potential the pairs can be separated. As a consequence, the majority\ncharge carriers are attracted to the semiconductor bulk whereas the minority charge carriers\nare drawn to the semiconductor/electrolyte interface where they can be transferred to a RedOx\nspecies creating an additional current called photocurrent. Figure :numref: fig_photocurrent_generation illustrates schematically the mechanism leading\nto the creation of a photocurrent. \nn-type (p-type) semiconductors generate anodic (cathodic) photocurrents where the electrons (holes)\nmove towards the external circuit whereas the holes (electrons) move towards the interface.\nThe photocurrent is significant when the semiconductor/electrolyte junction is in depletion.\nTherefore, the applied potential on n-type (p-type) semiconductors is greater (lower) than the \nflat band potential. .. _fig_photocurrent_generation:\n.. figure:: ../media/ecx_pec-photocurrent_generation.png\n    :width: 600\n    :align: center\n    :alt: Photocurrent generation Schematic representation of the mechanism generating a photocurrent. Figure :numref: fig_iph_ntype and :numref: fig_iph_ptype show the anodic (cathodic) photocurrent \nfor a GaAs n-type (p-type) semiconductor. .. _fig_iph_ntype:\n.. figure:: ../media/ecx_pec-iph_example_n_type.png\n    :width: 300\n    :align: center\n    :alt: Anodic photocurrent Anodic photocurrent for n - type GaAs . .. _fig_iph_ptype:\n.. figure:: ../media/ecx_pec-iph_example_p_type.png\n    :width: 300\n    :align: center\n    :alt: Cathodic photocurrent Cathodic photocurrent for p - type GaAs . :cite:t: gartner1959-1 and :cite:t: butler1977-1 proposed a simple and robust model\nfor describing the photocurrent considering that the recombination of the photogenerated\nelectron/hole pairs does not occur in the space charge. Therefore, the photocurrent is proportional\nto the photon flux :math: \\Phi_0 . Moreover, the photocurrent depends on the relative ratio \nbetween the space charge width, :math: w_{sc} , the depth of penetration given by the\ninverse of the absorption coefficient, :math: \\alpha and the average diffusion length,\n:math: L_{sc} , of the minority charge carriers.\nIn other words, all absorbed photons generate electron/hole pairs and the \nminority charge carriers are transferred to the electrolyte and therefore contribute to the\nphotocurrent whose expression is given by the equation :eq: eq_iph_complete . .. math::\n    :label: eq_iph_complete I_{ph} = \\Phi _0 \\left[ 1 - \\frac{\\exp (-\\alpha _ {sc} \\cdot w_{sc})}{1+\\alpha _{sc} \\cdot L_ {sc}} \\right] When :math: \\alpha _{sc} \\cdot w_{sc} << 1 and :math: \\alpha _{sc} \\cdot L_{sc} << 1 ,\nthe photocurrent is approximated by the equation :eq: eq_iph_approx . .. math::\n    :label: eq_iph_approx I_{ph} = \\Phi _0 \\cdot \\alpha _ {sc} \\cdot w_{sc} The expression of the space charge width, :math: w_{sc} , in depletion is given by the equation \n:eq: eq_wsc_depletion according to the Mott-Schottky theory. \n:math: N_{cc} represents the number of majority carriers, supposed to be equal to the doping,\n:math: e corresponds to the elementary charge of an electron, :math: U represents \nthe applied potential, :math: U_{fb} represents the flat band potential, :math: \\epsilon and \n:math: \\epsilon _0 represent the relative and the vacuum permittivity, respectively. .. math::\n    :label: eq_wsc_depletion w_{sc} = \\sqrt{\\frac{2 \\epsilon \\epsilon _0}{e N_ {cc}} \\cdot \\left( U-U_{fb}-\\frac{kT}{e} \\right)} The expression of the absorption coefficient :math: \\alpha _{sc} with respect to the light energy\n:math: h\\nu is shown in equation :eq: eq_alpha . The value of :math: n depends on the band-band \ntransition type. :math: n takes discreet values 0.5 or 2 when direct or indirect transitions\nare allowed, respectively. .. math::\n    :label: eq_alpha \\ alpha _ { sc } = C \\ cdot \\ frac {( h \\ nu - E_g ) &#94; n }{ h \\ nu } \\ text { with } C = \\ text { constant } The complete expression of the photocurrent is therefore given by the equation :eq: eq_iph_approx_complete .\nThe latter is obtained by substituting the absorption coefficient :math: \\alpha _{sc} and the space charge\nwidth :math: w_{sc} from the equation :eq: eq_iph_approx by the equations :eq: eq_wsc_depletion and :eq: eq_alpha . .. math::\n    :label: eq_iph_approx_complete I_{ph} = \\Phi _0 \\cdot C \\cdot \\frac{(h\\nu-E_g)&#94;n}{h\\nu} \\cdot \\sqrt{\\frac{2 \\epsilon \\epsilon _0}{e N_ {cc}} \\cdot \\left( U-U_{fb}-\\frac{kT}{e} \\right)} The linear transform with respect to the energy of the equation :eq: eq_iph_approx_complete is shown in equation :eq: eq_linear_trans_hv and it is used for determining the band gaps.\nThe linear transform with respect to the potential is shown in equation :eq: eq_linear_trans_U and \nit is used for determining the semiconduction type, the flat band potential and the number of majority charge carriers. .. math::\n    :label: eq_linear_trans_hv \\left[ \\frac{I_{ph}\\cdot h\\nu}{\\Phi _0} \\right]&#94;{1/n} = C \\cdot (h\\nu - E_g) .. math::\n    :label: eq_linear_trans_U I_{ph}&#94;2 = C\\cdot \\left( U-U_{fb}-\\frac{kT}{e} \\right)","tags":"","loc":"page/specs/pec.html"}]}